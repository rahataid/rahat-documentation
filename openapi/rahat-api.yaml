openapi: 3.0.0
paths:
  /v1/app/auth-apps:
    get:
      operationId: AppController_listAuthApps
      parameters:
        - name: name
          required: false
          in: query
          schema:
            example: Community Tool
            type: string
        - name: page
          required: true
          in: query
          schema:
            example: 1
            type: number
        - name: perPage
          required: true
          in: query
          schema:
            example: '10'
            type: number
        - name: sort
          required: false
          in: query
          schema:
            example: '1'
            type: string
        - name: order
          required: false
          in: query
          schema:
            example: desc
            type: string
      responses:
        '200':
          description: ''
      tags:
        - App
      security:
        - JWT: []
    post:
      operationId: AppController_createAuthApp
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAuthAppDto'
      responses:
        '201':
          description: ''
      tags:
        - App
      security:
        - JWT: []
  /v1/app/auth-apps/{uuid}:
    get:
      operationId: AppController_getAuthApp
      parameters:
        - name: uuid
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - App
      security:
        - JWT: []
    put:
      operationId: AppController_updateAuthApp
      parameters:
        - name: uuid
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAuthAppDto'
      responses:
        '200':
          description: ''
      tags:
        - App
      security:
        - JWT: []
    delete:
      operationId: AppController_softDeleteAuthApp
      parameters:
        - name: uuid
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - App
      security:
        - JWT: []
  /v1/app/auth-apps/{address}/identity:
    get:
      operationId: AppController_getByAddress
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - App
      security:
        - JWT: []
  /v1/beneficiaries:
    get:
      operationId: BeneficiaryController_list
      parameters:
        - name: sort
          required: true
          in: query
          schema:
            example: createdAt
            type: string
        - name: order
          required: true
          in: query
          schema:
            example: desc
            type: string
        - name: page
          required: true
          in: query
          schema:
            example: 1
            type: number
        - name: perPage
          required: true
          in: query
          schema:
            example: '10'
            type: number
        - name: projectId
          required: false
          in: query
          schema:
            example: d8f61ebb-ae83-4a8b-8f36-ed756aa27d12
            type: string
        - name: gender
          required: false
          in: query
          schema:
            example: MALE
            type: string
        - name: type
          required: false
          in: query
          schema:
            example: REFERRED
            type: string
        - name: startDate
          required: false
          in: query
          schema:
            example: '2024-06-25T18:15:00.000Z'
            type: string
        - name: endDate
          required: false
          in: query
          schema:
            example: '2024-06-25T18:15:00.000Z'
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Beneficiaries
      security:
        - JWT: []
    post:
      operationId: BeneficiaryController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBeneficiaryDto'
      responses:
        '201':
          description: ''
      tags:
        - Beneficiaries
      security:
        - JWT: []
  /v1/beneficiaries/temp/{uuid}:
    get:
      operationId: BeneficiaryController_listTempBenef
      parameters:
        - name: order
          required: true
          in: query
          schema:
            example: desc
            type: string
        - name: page
          required: true
          in: query
          schema:
            example: 1
            type: number
        - name: perPage
          required: true
          in: query
          schema:
            example: '10'
            type: number
        - name: firstName
          required: false
          in: query
          schema:
            example: Demo
            type: string
        - name: uuid
          required: true
          in: path
          schema: {}
      responses:
        '200':
          description: ''
      tags:
        - Beneficiaries
      security:
        - JWT: []
  /v1/beneficiaries/temp-groups:
    get:
      operationId: BeneficiaryController_listTempGroups
      parameters:
        - name: order
          required: true
          in: query
          schema:
            example: desc
            type: string
        - name: page
          required: true
          in: query
          schema:
            example: 1
            type: number
        - name: perPage
          required: true
          in: query
          schema:
            example: '10'
            type: number
        - name: name
          required: false
          in: query
          schema:
            example: Demo
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Beneficiaries
      security:
        - JWT: []
  /v1/beneficiaries/pii:
    get:
      operationId: BeneficiaryController_listPiiData
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - Beneficiaries
      security:
        - JWT: []
  /v1/beneficiaries/stats:
    get:
      operationId: BeneficiaryController_getStats
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - Beneficiaries
  /v1/beneficiaries/statsSource:
    get:
      operationId: BeneficiaryController_getStatsSource
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - Beneficiaries
  /v1/beneficiaries/table-stats:
    get:
      operationId: BeneficiaryController_getTableStats
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - Beneficiaries
  /v1/beneficiaries/projects/{uuid}:
    post:
      operationId: BeneficiaryController_referBeneficiary
      parameters:
        - name: uuid
          required: true
          in: path
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddBenToProjectDto'
      responses:
        '201':
          description: ''
      tags:
        - Beneficiaries
      security:
        - JWT: []
  /v1/beneficiaries/bulk:
    post:
      operationId: BeneficiaryController_createBulk
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '201':
          description: ''
      tags:
        - Beneficiaries
      security:
        - JWT: []
  /v1/beneficiaries/upload:
    post:
      operationId: BeneficiaryController_upload
      parameters: []
      responses:
        '201':
          description: ''
      tags:
        - Beneficiaries
      security:
        - JWT: []
  /v1/beneficiaries/upload-queue:
    post:
      operationId: BeneficiaryController_uploadWithQueue
      parameters: []
      responses:
        '201':
          description: ''
      tags:
        - Beneficiaries
      security:
        - JWT: []
  /v1/beneficiaries/{uuid}:
    patch:
      operationId: BeneficiaryController_update
      parameters:
        - name: uuid
          required: true
          in: path
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBeneficiaryDto'
      responses:
        '200':
          description: ''
      tags:
        - Beneficiaries
      security:
        - JWT: []
    delete:
      operationId: BeneficiaryController_delete
      parameters:
        - name: uuid
          required: true
          in: path
          schema: {}
      responses:
        '200':
          description: ''
      tags:
        - Beneficiaries
      security:
        - JWT: []
    get:
      operationId: BeneficiaryController_getBeneficiary
      parameters:
        - name: uuid
          required: true
          in: path
          schema: {}
      responses:
        '200':
          description: ''
      tags:
        - Beneficiaries
      security:
        - JWT: []
  /v1/beneficiaries/remove/{uuid}:
    patch:
      operationId: BeneficiaryController_remove
      parameters:
        - name: uuid
          required: true
          in: path
          schema: {}
      responses:
        '200':
          description: ''
      tags:
        - Beneficiaries
      security:
        - JWT: []
  /v1/beneficiaries/wallet/{wallet}:
    get:
      operationId: BeneficiaryController_getBeneficiaryByWallet
      parameters:
        - name: wallet
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Beneficiaries
  /v1/beneficiaries/phone/{phone}:
    get:
      operationId: BeneficiaryController_getBeneficiaryByPhone
      parameters:
        - name: phone
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Beneficiaries
      security:
        - JWT: []
  /v1/beneficiaries/verification-link/{uuid}:
    get:
      operationId: BeneficiaryController_generateVerificationLink
      parameters:
        - name: uuid
          required: true
          in: path
          schema: {}
      responses:
        '200':
          description: ''
      tags:
        - Beneficiaries
      security:
        - JWT: []
  /v1/beneficiaries/validate-wallet:
    post:
      operationId: BeneficiaryController_validateWallet
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateWalletDto'
      responses:
        '201':
          description: ''
      tags:
        - Beneficiaries
      security:
        - JWT: []
  /v1/beneficiaries/verify-signature:
    post:
      operationId: BeneficiaryController_verifySignature
      parameters: []
      responses:
        '201':
          description: ''
      tags:
        - Beneficiaries
      security:
        - JWT: []
  /v1/beneficiaries/groups:
    post:
      operationId: BeneficiaryController_createGroup
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBeneficiaryGroupsDto'
      responses:
        '201':
          description: ''
      tags:
        - Beneficiaries
      security:
        - JWT: []
  /v1/beneficiaries/groups/all:
    get:
      operationId: BeneficiaryController_getAllGroups
      parameters:
        - name: sort
          required: true
          in: query
          schema:
            example: createdAt
            type: string
        - name: order
          required: true
          in: query
          schema:
            example: asc
            type: string
        - name: page
          required: true
          in: query
          schema:
            example: 1
            type: number
        - name: perPage
          required: true
          in: query
          schema:
            example: '10'
            type: number
        - name: projectId
          required: false
          in: query
          schema:
            example: d8f61ebb-ae83-4a8b-8f36-ed756aa27d12
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Beneficiaries
      security:
        - JWT: []
  /v1/beneficiaries/groups/{uuid}:
    get:
      operationId: BeneficiaryController_getOneGroup
      parameters:
        - name: uuid
          required: true
          in: path
          schema: {}
      responses:
        '200':
          description: ''
      tags:
        - Beneficiaries
      security:
        - JWT: []
    delete:
      operationId: BeneficiaryController_removeGroup
      parameters:
        - name: hardDelete
          required: false
          in: query
          description: >-
            If true, permanently deletes the group and beneficiaries. If false
            or not provided, performs soft delete.
          schema:
            type: boolean
        - name: uuid
          required: true
          in: path
          schema: {}
      responses:
        '200':
          description: ''
      tags:
        - Beneficiaries
      security:
        - JWT: []
    patch:
      operationId: BeneficiaryController_updateGroup
      parameters:
        - name: uuid
          required: true
          in: path
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBeneficiaryGroupDto'
      responses:
        '200':
          description: ''
      tags:
        - Beneficiaries
      security:
        - JWT: []
  /v1/beneficiaries/groups/{uuid}/account-check:
    get:
      operationId: BeneficiaryController_groupAccountCheck
      parameters:
        - name: uuid
          required: true
          in: path
          schema: {}
      responses:
        '200':
          description: ''
      tags:
        - Beneficiaries
      security:
        - JWT: []
  /v1/beneficiaries/groups/{uuid}/fail-account/export:
    get:
      operationId: BeneficiaryController_getGroupBeneficiariesFailedAccount
      parameters:
        - name: uuid
          required: true
          in: path
          schema: {}
      responses:
        '200':
          description: ''
      tags:
        - Beneficiaries
      security:
        - JWT: []
  /v1/beneficiaries/groups/{uuid}/addGroupPurpose:
    patch:
      operationId: BeneficiaryController_addGroupPurpose
      parameters:
        - name: uuid
          required: true
          in: path
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddGroupsPurposeDto'
      responses:
        '200':
          description: ''
      tags:
        - Beneficiaries
      security:
        - JWT: []
  /v1/beneficiaries/import-tools:
    post:
      operationId: BeneficiaryController_importBeneficiariesFromTool
      parameters: []
      responses:
        '201':
          description: ''
      tags:
        - Beneficiaries
  /v1/beneficiaries/import-temp:
    post:
      operationId: BeneficiaryController_importTempBeneficiaries
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportTempBenefDto'
      responses:
        '201':
          description: ''
      tags:
        - Beneficiaries
      security:
        - JWT: []
  /v1/settings:
    get:
      operationId: SettingsController_list
      parameters:
        - name: sort
          required: true
          in: query
          schema:
            example: 1
            type: string
        - name: order
          required: true
          in: query
          schema:
            example: desc
            type: string
        - name: page
          required: true
          in: query
          schema:
            example: 1
            type: number
        - name: perPage
          required: true
          in: query
          schema:
            example: '10'
            type: number
        - name: name
          required: false
          in: query
          schema:
            example: Tayaba
            type: string
        - name: private
          required: false
          in: query
          schema:
            example: false
            type: boolean
        - name: readOnly
          required: false
          in: query
          schema:
            example: false
            type: boolean
      responses:
        '200':
          description: ''
      tags:
        - Settings
    post:
      operationId: SettingsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSettingDto'
      responses:
        '201':
          description: ''
      tags:
        - Settings
  /v1/settings/{name}:
    get:
      operationId: SettingsController_get
      parameters:
        - name: name
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Settings
    patch:
      operationId: SettingsController_udpdate
      parameters:
        - name: name
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSettngsDto'
      responses:
        '200':
          description: ''
      tags:
        - Settings
  /v1/users/wallets:
    get:
      operationId: CustomUsersController_getWallets
      parameters:
        - name: page
          required: false
          in: query
          description: page number
          schema:
            example: 1
            type: number
        - name: perPage
          required: false
          in: query
          description: number of items per page
          schema:
            example: 10
            type: number
        - name: sort
          required: false
          in: query
          description: Sort field
          schema:
            example: createdAt
            type: string
        - name: order
          required: false
          in: query
          description: Sort order
          schema:
            example: desc
            type: string
        - name: roles
          required: false
          in: query
          description: Filter users by roles (comma-separated)
          schema:
            example: admin,manager
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Users
      security:
        - JWT: []
  /v1/users:
    get:
      operationId: UsersController_list
      parameters:
        - name: page
          required: false
          in: query
          description: page number
          schema:
            example: 1
            type: number
        - name: perPage
          required: false
          in: query
          description: number of items per page
          schema:
            example: 10
            type: number
        - name: sort
          required: false
          in: query
          description: Sort field
          schema:
            example: createdAt
            type: string
        - name: order
          required: false
          in: query
          description: Sort order
          schema:
            example: desc
            type: string
        - name: roles
          required: false
          in: query
          description: Filter users by roles (comma-separated)
          schema:
            example: admin,manager
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Users
      security:
        - JWT: []
    post:
      operationId: UsersController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: ''
      tags:
        - Users
      security:
        - JWT: []
  /v1/users/me:
    get:
      operationId: UsersController_getMe
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - Users
      security:
        - JWT: []
    patch:
      operationId: UsersController_updateMe
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: ''
      tags:
        - Users
      security:
        - JWT: []
  /v1/users/me/update-auth:
    patch:
      operationId: UsersController_changePassword
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: ''
      tags:
        - Users
      security:
        - JWT: []
  /v1/users/{uuid}:
    get:
      operationId: UsersController_get
      parameters:
        - name: uuid
          required: true
          in: path
          description: Unique identifier
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Users
      security:
        - JWT: []
    patch:
      operationId: UsersController_update
      parameters:
        - name: uuid
          required: true
          in: path
          description: Unique identifier
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: ''
      tags:
        - Users
      security:
        - JWT: []
    delete:
      operationId: UsersController_delete
      parameters:
        - name: uuid
          required: true
          in: path
          description: Unique identifier
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Users
      security:
        - JWT: []
  /v1/users/{uuid}/roles:
    get:
      operationId: UsersController_getRoles
      parameters:
        - name: uuid
          required: true
          in: path
          description: Unique identifier
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Users
      security:
        - JWT: []
    post:
      operationId: UsersController_addRoles
      parameters:
        - name: uuid
          required: true
          in: path
          description: Unique identifier
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              example:
                - admin
                - user
              items:
                type: string
      responses:
        '201':
          description: ''
      tags:
        - Users
      security:
        - JWT: []
    delete:
      operationId: UsersController_removeRoles
      parameters:
        - name: uuid
          required: true
          in: path
          description: Unique identifier
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              example:
                - admin
                - user
              items:
                type: string
      responses:
        '200':
          description: ''
      tags:
        - Users
      security:
        - JWT: []
  /v1/vendors:
    post:
      operationId: VendorsController_registerVendor
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VendorRegisterDto'
      responses:
        '201':
          description: ''
      tags:
        - Vendors
    get:
      operationId: VendorsController_listVendor
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - Vendors
  /v1/vendors/stats:
    get:
      operationId: VendorsController_getVendorCount
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - Vendors
  /v1/vendors/{id}:
    get:
      operationId: VendorsController_getVendor
      parameters:
        - name: id
          required: true
          in: path
          schema: {}
      responses:
        '200':
          description: ''
      tags:
        - Vendors
  /v1/vendors/getOtp:
    post:
      operationId: VendorsController_getOtp
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetVendorOtp'
      responses:
        '201':
          description: ''
      tags:
        - Vendors
  /v1/vendors/verifyOtp:
    post:
      operationId: VendorsController_verifyOtp
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyVendorOtp'
      responses:
        '201':
          description: ''
      tags:
        - Vendors
  /v1/vendors/update/{uuid}:
    patch:
      operationId: VendorsController_updateVendor
      parameters:
        - name: uuid
          required: true
          in: path
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VendorUpdateDto'
      responses:
        '200':
          description: ''
      tags:
        - Vendors
  /v1/vendors/remove/{vendorId}:
    patch:
      operationId: VendorsController_removeVendor
      parameters:
        - name: vendorId
          required: true
          in: path
          schema: {}
      responses:
        '200':
          description: ''
      tags:
        - Vendors
  /v1/auth/login:
    post:
      operationId: AuthsController_loginOtp
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OtpLoginDto'
      responses:
        '200':
          description: ''
      tags:
        - Auth
  /v1/auth/otp:
    post:
      operationId: AuthsController_getOtp
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OtpDto'
      responses:
        '200':
          description: ''
      tags:
        - Auth
  /v1/auth/wallet:
    post:
      operationId: AuthsController_walletLogin
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletLoginDto'
      responses:
        '201':
          description: ''
      tags:
        - Auth
  /v1/auth/challenge:
    post:
      operationId: AuthsController_getChallenge
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChallengeDto'
      responses:
        '201':
          description: ''
      tags:
        - Auth
  /v1/roles:
    post:
      operationId: RolesController_createRole
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleDto'
      responses:
        '201':
          description: ''
      tags:
        - Roles & Permissions
      security:
        - JWT: []
    get:
      operationId: RolesController_listRoles
      parameters:
        - name: page
          required: false
          in: query
          description: page number
          schema:
            example: 1
            type: number
        - name: perPage
          required: false
          in: query
          description: number of items per page
          schema:
            example: 10
            type: number
        - name: sort
          required: false
          in: query
          description: Sort field
          schema:
            example: createdAt
            type: string
        - name: order
          required: false
          in: query
          description: Sort order
          schema:
            example: desc
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Roles & Permissions
      security:
        - JWT: []
  /v1/roles/search-by-permission:
    post:
      operationId: RolesController_searchRolesByPermission
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchPermissionDto'
      responses:
        '201':
          description: ''
      tags:
        - Roles & Permissions
      security:
        - JWT: []
  /v1/roles/{name}:
    patch:
      operationId: RolesController_updateRole
      parameters:
        - name: name
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditRoleDto'
      responses:
        '200':
          description: ''
      tags:
        - Roles & Permissions
      security:
        - JWT: []
    delete:
      operationId: RolesController_deleteRole
      parameters:
        - name: name
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Roles & Permissions
      security:
        - JWT: []
    get:
      operationId: RolesController_getRole
      parameters:
        - name: name
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Roles & Permissions
      security:
        - JWT: []
  /v1/roles/{name}/permissions:
    get:
      operationId: RolesController_listPermsByRole
      parameters:
        - name: name
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Roles & Permissions
      security:
        - JWT: []
  /v1/projects:
    post:
      operationId: ProjectController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectDto'
      responses:
        '201':
          description: ''
      tags:
        - Projects
      security:
        - JWT: []
    get:
      operationId: ProjectController_list
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - Projects
      security:
        - JWT: []
  /v1/projects/actions:
    post:
      operationId: ProjectController_msActions
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCommunicationDto'
      responses:
        '201':
          description: ''
      tags:
        - Projects
      security:
        - JWT: []
  /v1/projects/{uuid}/upload:
    post:
      operationId: ProjectController_upload
      parameters: []
      responses:
        '201':
          description: ''
      tags:
        - Projects
      security:
        - JWT: []
  /v1/projects/{uuid}:
    get:
      operationId: ProjectController_findOne
      parameters:
        - name: uuid
          required: true
          in: path
          schema: {}
      responses:
        '200':
          description: ''
      tags:
        - Projects
      security:
        - JWT: []
    patch:
      operationId: ProjectController_update
      parameters:
        - name: uuid
          required: true
          in: path
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectDto'
      responses:
        '200':
          description: ''
      tags:
        - Projects
      security:
        - JWT: []
    delete:
      operationId: ProjectController_remove
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - Projects
      security:
        - JWT: []
  /v1/projects/{uuid}/status:
    patch:
      operationId: ProjectController_updateStatus
      parameters:
        - name: uuid
          required: true
          in: path
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectStatusDto'
      responses:
        '200':
          description: ''
      tags:
        - Projects
      security:
        - JWT: []
  /v1/projects/{uuid}/beneficiaries:
    get:
      operationId: ProjectController_listBeneficiaries
      parameters:
        - name: sort
          required: true
          in: query
          schema:
            example: ENROLLED
            type: string
        - name: order
          required: true
          in: query
          schema:
            example: ENROLLED
            type: string
        - name: page
          required: true
          in: query
          schema:
            example: 1
            type: number
        - name: perPage
          required: true
          in: query
          schema:
            example: 10
            type: number
        - name: status
          required: true
          in: query
          schema:
            example: ENROLLED
            type: string
        - name: type
          required: true
          in: query
          schema:
            example: NOT_ASSIGNED
            type: string
        - name: projectId
          required: true
          in: query
          schema:
            example: d8f61ebb-ae83-4a8b-8f36-ed756aa27d12
            type: string
        - name: uuid
          required: true
          in: path
          schema: {}
      responses:
        '200':
          description: ''
      tags:
        - Projects
      security:
        - JWT: []
  /v1/projects/{uuid}/settings:
    post:
      operationId: ProjectController_addSettings
      parameters:
        - name: uuid
          required: true
          in: path
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSettingDto'
      responses:
        '201':
          description: ''
      tags:
        - Projects
      security:
        - JWT: []
  /v1/projects/{uuid}/actions:
    post:
      operationId: ProjectController_projectActions
      parameters:
        - name: uuid
          required: true
          in: path
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCommunicationDto'
      responses:
        '201':
          description: ''
      tags:
        - Projects
      security:
        - JWT: []
  /v1/projects/{uuid}/stats:
    get:
      operationId: ProjectController_projectStats
      parameters:
        - name: uuid
          required: true
          in: path
          schema: {}
      responses:
        '200':
          description: ''
      tags:
        - Projects
  /v1/projects/{uuid}/statsSources:
    get:
      operationId: ProjectController_projectStatsSources
      parameters:
        - name: uuid
          required: false
          in: path
          schema: {}
      responses:
        '200':
          description: ''
      tags:
        - Projects
      security:
        - JWT: []
  /v1/projects/{uuid}/kobo-import:
    post:
      operationId: ProjectController_importFromKobo
      parameters:
        - name: uuid
          required: true
          in: path
          schema: {}
      responses:
        '201':
          description: ''
      tags:
        - Projects
  /v1/projects/{uuid}/test:
    post:
      operationId: ProjectController_testMsg
      parameters:
        - name: uuid
          required: true
          in: path
          schema: {}
      responses:
        '201':
          description: ''
      tags:
        - Projects
  /v1/projects/{uuid}/kobo-import-simulate:
    post:
      operationId: ProjectController_koboImportSimulate
      parameters:
        - name: uuid
          required: true
          in: path
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestKoboImportDto'
      responses:
        '201':
          description: ''
      tags:
        - Projects
  /v1/stats:
    get:
      operationId: StatsController_findAll
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - Stats
  /v1/stats/{name}:
    get:
      operationId: StatsController_findOne
      parameters:
        - name: name
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Stats
  /v1/upload/file:
    post:
      operationId: UploadController_uploadFile
      parameters: []
      requestBody:
        required: true
        description: Upload file
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadDto'
      responses:
        '201':
          description: ''
      tags:
        - Upload
  /v1/grievances:
    post:
      operationId: GrievanceController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGrievanceDTO'
      responses:
        '201':
          description: ''
      tags:
        - Grievances
      security:
        - JWT: []
    get:
      operationId: GrievanceController_findAll
      parameters:
        - name: sort
          required: false
          in: query
          schema:
            example: createdAt
            type: string
        - name: order
          required: false
          in: query
          schema:
            example: asc
            type: string
        - name: page
          required: false
          in: query
          schema:
            example: 1
            type: number
        - name: perPage
          required: false
          in: query
          schema:
            example: '10'
            type: number
        - name: projectId
          required: false
          in: query
          schema:
            example: d8f61ebb-ae83-4a8b-8f36-ed756aa27d12
            type: string
        - name: title
          required: false
          in: query
          schema:
            example: title
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Grievances
      security:
        - JWT: []
  /v1/grievances/{uuid}/change-status:
    patch:
      operationId: GrievanceController_changeStatus
      parameters:
        - name: uuid
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeGrievanceStatusDTO'
      responses:
        '200':
          description: ''
      tags:
        - Grievances
      security:
        - JWT: []
  /v1/grievances/{uuid}:
    delete:
      operationId: GrievanceController_softDelete
      parameters:
        - name: uuid
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Grievances
      security:
        - JWT: []
  /v1/token:
    post:
      operationId: TokenController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTokenDto'
      responses:
        '201':
          description: ''
      tags:
        - Tokens
    get:
      operationId: TokenController_findAll
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - Tokens
  /v1/token/{contractAddress}:
    get:
      operationId: TokenController_findOne
      parameters:
        - name: contractAddress
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Tokens
  /v1/token/{id}:
    delete:
      operationId: TokenController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Tokens
  /v1/offramps:
    post:
      operationId: OfframpController_createOfframpRequest
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOfframpRequestDto'
      responses:
        '201':
          description: ''
      tags:
        - Offramps
    get:
      operationId: OfframpController_findAllOfframpRequests
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - Offramps
  /v1/offramps/execute:
    post:
      operationId: OfframpController_executeOfframpRequest
      parameters: []
      responses:
        '201':
          description: ''
      tags:
        - Offramps
  /v1/offramps/providers:
    post:
      operationId: OfframpController_registerProvider
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOfframpProviderDto'
      responses:
        '201':
          description: ''
      tags:
        - Offramps
    get:
      operationId: OfframpController_listProviders
      parameters:
        - name: page
          required: false
          in: query
          schema:
            example: 1
            type: number
        - name: perPage
          required: false
          in: query
          schema:
            example: '10'
            type: number
      responses:
        '200':
          description: ''
      tags:
        - Offramps
  /v1/offramps/providers/{uuid}:
    get:
      operationId: OfframpController_getProvidersById
      parameters:
        - name: uuid
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Offramps
  /v1/offramps/providers/actions:
    post:
      operationId: OfframpController_providerActions
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProviderActionDto'
      responses:
        '201':
          description: ''
      tags:
        - Offramps
  /v1/offramps/single:
    get:
      operationId: OfframpController_findOne
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - Offramps
  /v1/queue/contract-jobs:
    get:
      operationId: QueueController_getPendingContractJobs
      summary: Get Pending Contract Jobs with Filters
      parameters:
        - name: status
          required: false
          in: query
          description: Filter by job status
          schema:
            type: array
            items:
              type: string
        - name: name
          required: false
          in: query
          description: >-
            Filter by job name (e.g.,
            rahat.jobs.beneficiary.bulk_assign_vouchers)
          schema:
            type: string
        - name: startDate
          required: false
          in: query
          description: Filter by job creation start date (YYYY-MM-DD)
          schema:
            type: string
        - name: endDate
          required: false
          in: query
          description: Filter by job creation end date (YYYY-MM-DD)
          schema:
            type: string
      responses:
        '200':
          description: List of filtered contract jobs
      tags:
        - Queue
  /v1/queue/contract-jobs/retry/{id}:
    get:
      operationId: QueueController_retryContractJob
      summary: Retry a Failed Contract Job
      parameters:
        - name: id
          required: true
          in: path
          description: Job ID to retry
          schema: {}
      responses:
        '200':
          description: ''
      tags:
        - Queue
  /v1/queue/rahat-jobs:
    get:
      operationId: QueueController_getPendingRahatJobs
      summary: Get Pending Rahat Jobs with Filters
      parameters:
        - name: status
          required: false
          in: query
          description: Filter by job status
          schema:
            type: array
            items:
              type: string
        - name: name
          required: false
          in: query
          description: Filter by job name
          schema:
            type: string
        - name: startDate
          required: false
          in: query
          description: Filter by job creation start date (YYYY-MM-DD)
          schema:
            type: string
        - name: endDate
          required: false
          in: query
          description: Filter by job creation end date (YYYY-MM-DD)
          schema:
            type: string
      responses:
        '200':
          description: List of filtered Rahat jobs
      tags:
        - Queue
  /v1/queue/rahat-jobs/retry/{id}:
    get:
      operationId: QueueController_retryRahatJob
      summary: Retry a Failed Rahat Job
      parameters:
        - name: id
          required: true
          in: path
          description: Job ID to retry
          schema:
            type: number
      responses:
        '200':
          description: ''
      tags:
        - Queue
  /v1/queue/rahat-beneficiary-jobs:
    get:
      operationId: QueueController_getPendingRahatBeneficiaryJobs
      summary: Get Pending Rahat Beneficiary Jobs with Filters
      parameters:
        - name: status
          required: false
          in: query
          description: Filter by job status
          schema:
            type: array
            items:
              type: string
        - name: name
          required: false
          in: query
          description: Filter by job name
          schema:
            type: string
        - name: startDate
          required: false
          in: query
          description: Filter by job creation start date (YYYY-MM-DD)
          schema:
            type: string
        - name: endDate
          required: false
          in: query
          description: Filter by job creation end date (YYYY-MM-DD)
          schema:
            type: string
      responses:
        '200':
          description: List of filtered Rahat Beneficiary jobs
      tags:
        - Queue
  /v1/queue/rahat-beneficiary-jobs/retry/{id}:
    get:
      operationId: QueueController_retryRahatBeneficiaryJob
      summary: Retry a Failed Rahat Beneficiary Job
      parameters:
        - name: id
          required: true
          in: path
          description: Job ID to retry
          schema:
            type: number
      responses:
        '200':
          description: ''
      tags:
        - Queue
  /v1/queue/meta-txn-jobs:
    get:
      operationId: QueueController_getPendingMetaTxnJobs
      summary: Get Pending Meta Transaction Jobs with Filters
      parameters:
        - name: status
          required: false
          in: query
          description: Filter by job status
          schema:
            type: array
            items:
              type: string
        - name: name
          required: false
          in: query
          description: Filter by job name
          schema:
            type: string
        - name: startDate
          required: false
          in: query
          description: Filter by job creation start date (YYYY-MM-DD)
          schema:
            type: string
        - name: endDate
          required: false
          in: query
          description: Filter by job creation end date (YYYY-MM-DD)
          schema:
            type: string
      responses:
        '200':
          description: List of filtered Meta Transaction jobs
      tags:
        - Queue
  /v1/queue/meta-txn-jobs/retry/{id}:
    get:
      operationId: QueueController_retryMetaTxnJob
      summary: Retry a Failed Meta Transaction Job
      parameters:
        - name: id
          required: true
          in: path
          description: Job ID to retry
          schema:
            type: number
      responses:
        '200':
          description: ''
      tags:
        - Queue
info:
  title: Rahat Core
  description: API service for Rahat Core
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    JWT:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    CreateAuthAppDto:
      type: object
      properties:
        name:
          type: string
          example: Community Tool
        address:
          type: string
          example: '0x0afe4eaaaf2080027620cdd'
        description:
          type: string
          example: This is app desc
        nonceMessage:
          type: string
          example: HelloWorld
        createdBy:
          type: string
          example: e4eaaaf2-d142-11e1-b3e4-080027620cdd
      required:
        - name
        - address
        - description
        - nonceMessage
        - createdBy
    UpdateAuthAppDto:
      type: object
      properties:
        name:
          type: string
          example: Community Tool
        address:
          type: string
          example: '0x0afe4eaaaf2080027620cdd'
        description:
          type: string
          example: This is app desc
        nonceMessage:
          type: string
          example: HelloWorld
        createdBy:
          type: string
          example: e4eaaaf2-d142-11e1-b3e4-080027620cdd
    CreateBeneficiaryDto:
      type: object
      properties:
        uuid:
          type: object
          example: fd06bbd7-90d7-4797-8315-eaca2c88a31d
          description: Beneficiary ID
        birthDate:
          format: date-time
          type: string
          example: '1997-03-08'
          description: Date of birth in the YYYY-MM-DD format.
        age:
          type: number
          example: '20'
          description: Age of the beneficiary.
        gender:
          type: string
          example: FEMALE
          description: 'Gender '
        location:
          type: string
          example: lalitpur
          description: location of the beneficiary
        latitude:
          type: number
          example: '26.24'
          description: Latitude of community
        longitude:
          type: number
          example: '86.24'
          description: longitude of community
        notes:
          type: string
          example: '9785623749'
          description: Notes to remember
        walletAddress:
          type: string
          example: '0x742d35Cc6634C0532925a3b844Bc454e4438f44e'
          description: Ethereum address
        extras:
          type: object
          format: json
          description: Additional JSON data
          example:
            hasCitizenship: true
            passportNumber: '1234567'
            email: test@mailinator.com
        bankedStatus:
          type: string
          example: BANKED
          description: beneficiary bankin access
        internetStatus:
          type: string
          example: HOME_INTERNET
          description: Beneficiary internet access
        phoneStatus:
          type: string
          example: FEATURE_PHONE
          description: Beneficiary phone ownership
        piiData:
          type: object
          format: json
          description: Optional PII data for specific use cases
          example:
            name: Ram Shrestha
            phone: '98670023857'
            extras:
              bank: Laxmi Bank
              account: '9872200001'
        projectUUIDs:
          example:
            - 6bf367f9-d1f7-4133-a6df-ccd9dc22dc88
          description: Array of project UUIDs
          type: array
          items:
            type: string
      required:
        - uuid
        - birthDate
        - age
        - gender
        - location
        - walletAddress
        - bankedStatus
        - internetStatus
        - phoneStatus
        - projectUUIDs
    AddBenToProjectDto:
      type: object
      properties:
        referrerBeneficiary:
          type: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: UUID of the beneficiary
        referrerVendor:
          type: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: UUID of the vendor
        birthDate:
          format: date-time
          type: string
          example: '1997-03-08'
          description: Date of birth in the YYYY-MM-DD format.
        gender:
          type: string
          example: MALE
          description: 'Gender '
        type:
          type: string
          example: ENROLLED
          description: Beneficiary type
        location:
          type: string
          example: lalitpur
          description: location of the beneficiary
        latitude:
          type: number
          example: '26.24'
          description: Latitude of community
        longitude:
          type: number
          example: '86.24'
          description: longitude of community
        notes:
          type: string
          example: '9785623749'
          description: Notes to remember
        walletAddress:
          type: string
          example: '0x742d35Cc6634C0532925a3b844Bc454e4438f44e'
          description: Ethereum address
          format: hex
          minLength: 42
          maxLength: 42
        extras:
          type: object
          format: json
          description: Additional JSON data
          example:
            hasCitizenship: true
            passportNumber: '1234567'
        bankedStatus:
          type: string
          example: BANKED
          description: beneficiary bankin access
        internetStatus:
          type: string
          example: HOME_INTERNET
          description: Beneficiary internet access
        phoneStatus:
          type: string
          example: FEATURE_PHONE
          description: Beneficiary phone ownership
        piiData:
          type: object
          format: json
          description: Optional PII data for specific use cases
          example:
            name: Ram Shrestha
            phone: '98670023857'
            extras:
              bank: Laxmi Bank
              account: '9872200001'
      required:
        - referrerBeneficiary
        - referrerVendor
        - birthDate
        - gender
        - type
        - location
        - walletAddress
        - bankedStatus
        - internetStatus
        - phoneStatus
    UpdateBeneficiaryDto:
      type: object
      properties:
        id:
          type: number
          example: '1'
          description: beneficiaryId
        uuid:
          type: object
          example: 0-0-0-0-0
          description: Beneficiary ID
        birthDate:
          format: date-time
          type: string
          example: '1997-03-08'
          description: Date of birth in the YYYY-MM-DD format.
        gender:
          type: string
          example: FEMALE
          description: 'Gender '
        location:
          type: string
          example: lalitpur
          description: location of the beneficiary
        latitude:
          type: number
          example: '26.24'
          description: Latitude of community
        longitude:
          type: number
          example: '86.24'
          description: longitude of community
        notes:
          type: string
          example: '9785623749'
          description: Notes to remember
        walletAddress:
          type: string
          example: '0x742d35Cc6634C0532925a3b844Bc454e4438f44e'
          description: Ethereum address
          format: hex
          minLength: 42
          maxLength: 42
        extras:
          type: object
          format: json
          description: Additional JSON data
          example:
            hasCitizenship: true
            passportNumber: '1234567'
        bankedStatus:
          type: string
          example: BANKED
          description: beneficiary bankin access
        internetStatus:
          type: string
          example: HOME_INTERNET
          description: Beneficiary internet access
        phoneStatus:
          type: string
          example: FEATURE_PHONE
          description: Beneficiary phone ownership
        piiData:
          type: object
          format: json
          description: Optional PII data for specific use cases
          example:
            name: Ram Shrestha
            phone: '98670023857'
            extras:
              bank: Laxmi Bank
              account: '9872200001'
      required:
        - id
        - uuid
        - birthDate
        - gender
        - location
        - walletAddress
        - bankedStatus
        - internetStatus
        - phoneStatus
    ValidateWalletDto:
      type: object
      properties:
        encryptedData:
          type: string
          example: >-
            f525e780ee8a0681f9e3e5306cc2f285765f57d2f89ef29e8e13a58563d7faabd90df875241426f1a83b27d81a0ca7d9
          description: Encrypted Data
        walletAddress:
          type: string
          example: '0x17469fF5Bdc86a5FCeb4604534fF2a47a821d421'
          description: Wallet Address
      required:
        - encryptedData
        - walletAddress
    Beneficiary:
      type: object
      properties:
        uuid:
          type: string
          example: 9ecf2098-faa7-4457-9423-e057109c49d1
          description: Beneficiary UUID
      required:
        - uuid
    CreateBeneficiaryGroupsDto:
      type: object
      properties:
        name:
          type: string
          example: Group Name
          description: Name of the beneficiary group
        projectId:
          type: string
          example: '11111111111111'
          description: Project id
        beneficiaries:
          example:
            - uuid: d8f62368-7c43-449c-a112-5c175e5f889f
          description: Array of beneficiaries
          type: array
          items:
            $ref: '#/components/schemas/Beneficiary'
      required:
        - name
        - projectId
        - beneficiaries
    UpdateBeneficiaryGroupDto:
      type: object
      properties:
        uuid:
          type: object
          example: 0-0-0-0
          description: Beneficiary Group ID
        name:
          type: string
          example: John Doe
          description: Beneficiary Group Name
        beneficiaries:
          example:
            - uuid: c8581130-e5cf-4f4b-91ba-ae0381c133d2
          description: Array of beneficiaries
          type: array
          items:
            $ref: '#/components/schemas/Beneficiary'
      required:
        - uuid
        - name
        - beneficiaries
    AddGroupsPurposeDto:
      type: object
      properties:
        uuid:
          type: object
          example: 0-0-0-0-0
          description: Beneficiary ID
        groupPurpose:
          type: string
          example: BANK_TRANSFER
          description: Payout Mechanisms
          enum:
            - BANK_TRANSFER
            - MOBILE_MONEY
            - COMMUNICATION
      required:
        - uuid
        - groupPurpose
    ImportTempBenefDto:
      type: object
      properties:
        groupUUID:
          type: object
          description: Group UUID
          example: 19d4dcfd-8ed9-42c4-b282-4820b79d6330
      required:
        - groupUUID
    CreateSettingDto:
      type: object
      properties:
        name:
          type: string
          example: SMTP
          description: Name of the setting
        value:
          type: object
          example:
            host: smtp.gmail.com
            Port: 465
            secure: true
            username: test
            password: test
          description: Settings value. Can be string | number | boolean | object
        requiredFields:
          example:
            - host
            - port
            - secure
            - username
            - PASSWORD
          description: Settings value. Can be string | number | boolean | object
          type: array
          items:
            type: string
        isReadOnly:
          type: boolean
          example: false
          description: If true, setting value cannot be changed
        isPrivate:
          type: boolean
          example: true
          description: If true, setting value is not returned in public API
      required:
        - name
        - value
        - requiredFields
        - isReadOnly
        - isPrivate
    UpdateSettngsDto:
      type: object
      properties:
        value:
          type: object
          example:
            field1: value1
            field2: value2
        requiredFields:
          type: array
          items:
            type: string
          example:
            - field1
            - field2
        isPrivate:
          type: boolean
          example: false
        isReadOnly:
          type: boolean
          example: false
      required:
        - value
        - isPrivate
        - isReadOnly
    CreateUserDto:
      type: object
      properties:
        name:
          type: string
          example: Jane
          description: The full name of the User
        gender:
          type: string
          example: FEMALE
          description: Gender of the User
        email:
          type: string
          example: jane@rumsan.com
          description: Email of the User
        phone:
          type: string
          example: '9841234567'
          description: Phone number of the User
        wallet:
          type: string
          example: '0x1234567890abcdef'
          description: Wallet address of the User
        roles:
          example:
            - admin
            - user
          description: Roles of the User
          type: array
          items:
            type: string
      required:
        - name
        - gender
        - email
        - phone
        - wallet
        - roles
    UpdateUserDto:
      type: object
      properties:
        name:
          type: string
          example: Jane
          description: The full name of the User
        gender:
          type: string
          example: FEMALE
          description: Gender of the User
        email:
          type: string
          example: jane@rumsan.com
          description: Email of the User
        phone:
          type: string
          example: '9841234567'
          description: Phone number of the User
        wallet:
          type: string
          example: '0x1234567890abcdef'
          description: Wallet address of the User
      required:
        - name
        - gender
        - email
        - phone
        - wallet
    VendorRegisterDto:
      type: object
      properties:
        service:
          type: object
          example: EMAIL
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john@mailinator.com
        phone:
          type: string
          example: '9834123456'
        authWallet:
          type: string
          example: '0x000000000'
        wallet:
          type: string
          example: '0x000000000000000000000'
        extras:
          type: object
          example:
            isVendor: true
      required:
        - service
        - name
    GetVendorOtp:
      type: object
      properties:
        service:
          type: object
          example: EMAIL
        address:
          type: string
          example: john@mailinator.com
      required:
        - service
        - address
    VerifyVendorOtp:
      type: object
      properties:
        challenge:
          type: string
          example: ''
        address:
          type: string
          example: john@mailinator.com
        otp:
          type: string
          example: ''
      required:
        - challenge
        - address
        - otp
    VendorUpdateDto:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john@mailinator.com
        phone:
          type: string
          example: '9834123456'
        gender:
          type: object
          example: UNKNOWN
        wallet:
          type: object
          example: 0-0-0-0
        extras:
          type: object
          example:
            isVendor: true
      required:
        - name
    VendorAddToProjectDto:
      type: object
      properties:
        projectId:
          type: string
          example: d8f61ebb-ae83-4a8b-8f36-ed756aa27d12
        vendorId:
          type: string
          example: d8f61ebb-ae83-4a8b-8f36-ed756aa27d12
      required:
        - projectId
        - vendorId
    OtpLoginDto:
      type: object
      properties:
        challenge:
          type: string
          example: ''
        otp:
          type: string
          example: ''
        service:
          type: object
          example: EMAIL
      required:
        - challenge
        - otp
        - service
    OtpDto:
      type: object
      properties:
        address:
          type: string
          example: rumsan@mailinator.com
        service:
          type: object
          example: EMAIL
        clientId:
          type: string
          example: 105cd449-53f6-44e4-85f3-feaa7d762ffa
      required:
        - address
        - service
        - clientId
    WalletLoginDto:
      type: object
      properties: {}
    ChallengeDto:
      type: object
      properties: {}
    CreateClaimDto:
      type: object
      properties: {}
    CreateRoleDto:
      type: object
      properties:
        name:
          type: string
          example: Manager
        isSystem:
          type: boolean
          example: false
        permissions:
          type: object
          example: '{"user":["manage","read"]}'
      required:
        - name
        - isSystem
        - permissions
    SearchPermissionDto:
      type: object
      properties: {}
    EditRoleDto:
      type: object
      properties:
        name:
          type: string
          example: Manager
        isSystem:
          type: boolean
          example: false
        permissions:
          type: object
          example: '{"user":["manage","read"]}'
    CreateProjectDto:
      type: object
      properties:
        name:
          type: string
          example: Cash Distribution
        description:
          type: string
          example: Cash Distribution for the flood victims
        type:
          type: string
          example: el
        extras:
          type: object
          example:
            test: test
        contractAddress:
          type: string
          example: '0x123'
      required:
        - name
    ProjectCommunicationDto:
      type: object
      properties:
        action:
          type: string
          example: beneficiary.create
        payload:
          type: object
          example:
            name: John Doe
        trigger:
          type: object
          example:
            event_name: redeem.voucher
      required:
        - action
        - payload
        - trigger
    UpdateProjectDto:
      type: object
      properties: {}
    UpdateProjectStatusDto:
      type: object
      properties:
        status:
          type: string
          example: Some extra information
    TestKoboImportDto:
      type: object
      properties:
        type:
          type: string
          description: Beneficiary Type
          example: LEAD
        name:
          type: string
          example: Ram Shrestha
        gender:
          type: string
          example: MALE
        phone:
          type: string
          example: '9779800000000'
        age:
          type: number
          example: 20
        province:
          type: string
          example: Lumbini
        district:
          type: string
          example: Dang
        wardNo:
          type: string
          example: '12'
        leadInterests:
          example:
            - Sun Glasses
          type: array
          items:
            type: string
        meta:
          type: object
          example:
            _submitted_by: kobo_username
      required:
        - type
        - name
        - gender
        - phone
        - age
        - province
        - district
        - wardNo
        - leadInterests
        - meta
    FileUploadDto:
      type: object
      properties:
        file:
          type: string
          format: binary
      required:
        - file
    CreateGrievanceDTO:
      type: object
      properties:
        projectId:
          type: string
          example: 29ec35aa-e7c3-4715-a9cb-446f342101a1
          description: Id of the project
        reporterContact:
          type: string
          example: '9841234567'
          description: Contact number of the reporter
        title:
          type: string
          example: Grievance title
          description: Title of the grievance
        description:
          type: string
          example: Grievance description
          description: Description of the grievance
        type:
          type: string
          example: TECHNICAL
          description: Type of grievance
          enum:
            - TECHNICAL
            - NON_TECHNICAL
            - OTHER
        status:
          type: object
          example: NEW
          description: Status of the grievance
        reportedBy:
          type: string
          example: Sarvesh Karki
      required:
        - projectId
        - reporterContact
        - title
        - description
        - type
        - status
        - reportedBy
    ChangeGrievanceStatusDTO:
      type: object
      properties:
        status:
          type: object
          example: UNDER_REVIEW
          description: Status of the grievance
      required:
        - status
    CreateTokenDto:
      type: object
      properties:
        name:
          type: string
          example: Rahat Token
        symbol:
          type: string
          example: RHT
        description:
          type: string
          example: This is Rahat Token
        decimals:
          type: number
          example: 18
        initialSupply:
          type: number
          example: 1000
        fromBlock:
          type: number
          example: 235
        contractAddress:
          type: string
          example: '0x40BdA327da6460B106001709ef2F730825c634D8'
        transactionHash:
          type: string
          example: '0x9c6d83987ff6dfd81b4e428b4f4c468d2769b451ca2d4c31b99bb338e8cbeec9'
        type:
          type: object
          example: CREATED
      required:
        - name
        - symbol
        - description
        - fromBlock
        - contractAddress
    CreateOfframpRequestDto:
      type: object
      properties:
        providerUuid:
          type: string
          example: 0fe88e42-fd5b-4b65-bcbb-9039340f4759
          description: UUID of the offramp provider
        chain:
          type: string
          example: ethereum
          description: The blockchain network for the offramp request
        token:
          type: string
          example: ETH
          description: The token symbol for the offramp request
        amount:
          type: number
          example: '1.5'
          description: The amount of tokens for the offramp request
        senderAddress:
          type: string
          example: '0x1234567890123456789012345678901234567890'
          description: The sender address for the offramp request
      required:
        - providerUuid
        - chain
        - token
        - amount
    CreateOfframpProviderDto:
      type: object
      properties:
        name:
          type: string
          example: Kotani Pay
          description: Name of the offramp provider
        config:
          type: object
          example:
            baseUrl: https://sandbox-api.kotanipay.io/api/v3
            apiKey: kee
          description: Configuration of the offramp provider
        description:
          type: string
          example: Kotani Pay is a payment gateway
          description: Description of the offramp provider
        extras:
          type: object
          example:
            fee: 0.1
            supportedCurrency:
              - KES
              - USD
          description: Extra information about the offramp provider
      required:
        - name
        - config
        - description
        - extras
    ProviderActionDto:
      type: object
      properties:
        uuid:
          type: string
          example: 0fe88e42-fd5b-4b65-bcbb-9039340f4759
          description: UUID of the offramp provider
        action:
          type: string
          example: create-fiat-wallet
          description: Action to be performed on the offramp provider
        payload:
          type: object
          example:
            country_code: KE
            phone_number: '+254722154745 '
            network: AIRTEL
            account_name: rumsan-tester
          description: Payload to be sent to the offramp provider