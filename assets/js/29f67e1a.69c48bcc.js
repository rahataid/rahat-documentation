"use strict";(self.webpackChunkrahat_documentation=self.webpackChunkrahat_documentation||[]).push([[7570],{28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>l});var r=i(96540);const s={},a=r.createContext(s);function t(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(a.Provider,{value:n},e.children)}},81683:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Data-and-Integration/Using-Subgraph-for-Indexing","title":"Using TheGraph for Indexing","description":"The Graph Protocol is a decentralized indexing protocol that enables efficient querying of blockchain data. In Rahat, we use The Graph to index blockchain events and provide fast, reliable access to on-chain data through GraphQL APIs.","source":"@site/dev-docs/Data-and-Integration/01.Using-Subgraph-for-Indexing.md","sourceDirName":"Data-and-Integration","slug":"/Data-and-Integration/Using-Subgraph-for-Indexing","permalink":"/dev-docs/Data-and-Integration/Using-Subgraph-for-Indexing","draft":false,"unlisted":false,"editUrl":"https://github.com/rahataid/rahat-documentation/blob/dev/dev-docs/Data-and-Integration/01.Using-Subgraph-for-Indexing.md","tags":[],"version":"current","lastUpdatedAt":1753960473000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Using TheGraph for Indexing"},"sidebar":"myAutogeneratedSidebar","previous":{"title":"DB Schema","permalink":"/dev-docs/Appendix/DB-Schema"},"next":{"title":"Offramp Service Integration","permalink":"/dev-docs/Data-and-Integration/Offramp-Service-Integration"}}');var s=i(74848),a=i(28453);const t={sidebar_position:1,title:"Using TheGraph for Indexing"},l="Using TheGraph for Indexing",c={},d=[{value:"Overview",id:"overview",level:2},{value:"What is The Graph?",id:"what-is-the-graph",level:3},{value:"Why Use Subgraphs in Rahat?",id:"why-use-subgraphs-in-rahat",level:3},{value:"Architecture",id:"architecture",level:2},{value:"Rahat Subgraph Components",id:"rahat-subgraph-components",level:3},{value:"Indexed Events",id:"indexed-events",level:3},{value:"Token Events",id:"token-events",level:4},{value:"Beneficiary Events",id:"beneficiary-events",level:4},{value:"Project Events",id:"project-events",level:4},{value:"Claim Events",id:"claim-events",level:4},{value:"Vendor Events",id:"vendor-events",level:4},{value:"Setup and Installation",id:"setup-and-installation",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Environment Configuration",id:"environment-configuration",level:3},{value:"Project Structure",id:"project-structure",level:3},{value:"Subgraph Development",id:"subgraph-development",level:2},{value:"1. Schema Definition",id:"1-schema-definition",level:3},{value:"2. Event Handlers",id:"2-event-handlers",level:3},{value:"3. Subgraph Manifest",id:"3-subgraph-manifest",level:3},{value:"Deployment",id:"deployment",level:2},{value:"Local Development",id:"local-development",level:3},{value:"Hosted Service Deployment",id:"hosted-service-deployment",level:3},{value:"Available Scripts",id:"available-scripts",level:3},{value:"Querying Data",id:"querying-data",level:2},{value:"GraphQL Queries",id:"graphql-queries",level:3},{value:"Get All Beneficiaries",id:"get-all-beneficiaries",level:4},{value:"Get Beneficiary with Claims",id:"get-beneficiary-with-claims",level:4},{value:"Get Token Transfers",id:"get-token-transfers",level:4},{value:"Get Project Statistics",id:"get-project-statistics",level:4},{value:"Using in Applications",id:"using-in-applications",level:3},{value:"JavaScript/TypeScript",id:"javascripttypescript",level:4},{value:"React Hook",id:"react-hook",level:4},{value:"Monitoring and Maintenance",id:"monitoring-and-maintenance",level:2},{value:"Health Checks",id:"health-checks",level:3},{value:"Common Issues",id:"common-issues",level:3},{value:"Indexing Failures",id:"indexing-failures",level:4},{value:"Sync Delays",id:"sync-delays",level:4},{value:"Query Timeouts",id:"query-timeouts",level:4},{value:"Best Practices",id:"best-practices",level:3},{value:"Integration with Rahat Projects",id:"integration-with-rahat-projects",level:2},{value:"C2C (Crypto-to-Crypto)",id:"c2c-crypto-to-crypto",level:3},{value:"CVA (Cash Voucher Assistance)",id:"cva-cash-voucher-assistance",level:3},{value:"AA (Anticipatory Action)",id:"aa-anticipatory-action",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Local Development Issues",id:"local-development-issues",level:3},{value:"Deployment Issues",id:"deployment-issues",level:3},{value:"Query Issues",id:"query-issues",level:3},{value:"Resources",id:"resources",level:2},{value:"Support",id:"support",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"using-thegraph-for-indexing",children:"Using TheGraph for Indexing"})}),"\n",(0,s.jsx)(n.p,{children:"The Graph Protocol is a decentralized indexing protocol that enables efficient querying of blockchain data. In Rahat, we use The Graph to index blockchain events and provide fast, reliable access to on-chain data through GraphQL APIs."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.h3,{id:"what-is-the-graph",children:"What is The Graph?"}),"\n",(0,s.jsx)(n.p,{children:"The Graph is an indexing protocol for querying networks like Ethereum and IPFS. Anyone can build and publish open APIs, called subgraphs, making data easily accessible."}),"\n",(0,s.jsx)(n.h3,{id:"why-use-subgraphs-in-rahat",children:"Why Use Subgraphs in Rahat?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Real-time Data"}),": Index blockchain events as they happen"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Efficient Queries"}),": GraphQL API for complex data queries"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Decentralized"}),": No single point of failure"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cost-effective"}),": Reduce RPC calls and gas costs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Scalable"}),": Handle high-volume blockchain data"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,s.jsx)(n.h3,{id:"rahat-subgraph-components",children:"Rahat Subgraph Components"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Rahat Platform\n\u251c\u2500\u2500 Smart Contracts (EVM/Stellar)\n\u251c\u2500\u2500 The Graph Subgraph\n\u2502   \u251c\u2500\u2500 Schema Definition\n\u2502   \u251c\u2500\u2500 Event Handlers\n\u2502   \u251c\u2500\u2500 Entity Mappings\n\u2502   \u2514\u2500\u2500 GraphQL API\n\u2514\u2500\u2500 Frontend Applications\n"})}),"\n",(0,s.jsx)(n.h3,{id:"indexed-events",children:"Indexed Events"}),"\n",(0,s.jsx)(n.p,{children:"The Rahat subgraph indexes the following blockchain events:"}),"\n",(0,s.jsx)(n.h4,{id:"token-events",children:"Token Events"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Transfer"})," - ERC-20 token transfers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Approval"})," - Token approval events"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Mint"})," - Token minting operations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Burn"})," - Token burning operations"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"beneficiary-events",children:"Beneficiary Events"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"BeneficiaryAdded"})," - New beneficiary registration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"BeneficiaryRemoved"})," - Beneficiary removal"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"BeneficiaryUpdated"})," - Beneficiary information updates"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"project-events",children:"Project Events"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ProjectCreated"})," - New project initialization"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"TokensAllocated"})," - Token budget allocation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"TokensDisbursed"})," - Token distribution to beneficiaries"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"CampaignCreated"})," - Aid campaign creation"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"claim-events",children:"Claim Events"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ClaimCreated"})," - New claim submission"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ClaimProcessed"})," - Claim processing completion"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"OtpVerified"})," - OTP verification events"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"OfflineClaimProcessed"})," - Offline claim processing"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"vendor-events",children:"Vendor Events"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"VendorRegistered"})," - Vendor registration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"RedemptionProcessed"})," - Token redemption events"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"setup-and-installation",children:"Setup and Installation"}),"\n",(0,s.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Node.js"})," (v18 or higher)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Docker"})," (for local Graph Node)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Graph CLI"})," - Install globally:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install -g @graphprotocol/graph-cli\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"environment-configuration",children:"Environment Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.code,{children:".env"})," file in your project root:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-env",children:'# Database\nDATABASE_URL="postgresql://rahat:rahat@localhost:5432/rahat-rp"\n\n# Redis\nREDIS_HOST=localhost\nREDIS_PORT=6379\nREDIS_PASSWORD=\n\n# Blockchain\nPRIVATE_KEY=your_private_key\nRPC_URL=your_rpc_url\n\n# The Graph\nGRAPH_NODE_URL=http://localhost:8020\nIPFS_URL=http://localhost:5001\nGRAPH_STUDIO_KEY=your_graph_studio_key\n'})}),"\n",(0,s.jsx)(n.h3,{id:"project-structure",children:"Project Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"apps/\n\u2514\u2500\u2500 graph/                    # The Graph subgraph\n    \u251c\u2500\u2500 src/\n    \u2502   \u251c\u2500\u2500 mappings/         # Event handlers\n    \u2502   \u2514\u2500\u2500 schema.graphql    # GraphQL schema\n    \u251c\u2500\u2500 subgraph.yaml         # Subgraph manifest\n    \u2514\u2500\u2500 package.json\n"})}),"\n",(0,s.jsx)(n.h2,{id:"subgraph-development",children:"Subgraph Development"}),"\n",(0,s.jsx)(n.h3,{id:"1-schema-definition",children:"1. Schema Definition"}),"\n",(0,s.jsxs)(n.p,{children:["Define your GraphQL schema in ",(0,s.jsx)(n.code,{children:"schema.graphql"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'type Beneficiary @entity {\n  id: ID!\n  address: Bytes!\n  name: String\n  phone: String\n  type: BeneficiaryType!\n  createdAt: BigInt!\n  updatedAt: BigInt!\n  claims: [Claim!]! @derivedFrom(field: "beneficiary")\n  transfers: [Transfer!]! @derivedFrom(field: "to")\n}\n\ntype Project @entity {\n  id: ID!\n  name: String!\n  token: Token!\n  totalAllocated: BigInt!\n  totalDisbursed: BigInt!\n  beneficiaries: [Beneficiary!]!\n  campaigns: [Campaign!]!\n  createdAt: BigInt!\n}\n\ntype Token @entity {\n  id: ID!\n  address: Bytes!\n  name: String!\n  symbol: String!\n  decimals: Int!\n  totalSupply: BigInt!\n  transfers: [Transfer!]! @derivedFrom(field: "token")\n}\n\ntype Transfer @entity {\n  id: ID!\n  token: Token!\n  from: Beneficiary\n  to: Beneficiary!\n  amount: BigInt!\n  timestamp: BigInt!\n  transactionHash: String!\n}\n\ntype Claim @entity {\n  id: ID!\n  beneficiary: Beneficiary!\n  amount: BigInt!\n  status: ClaimStatus!\n  otpVerified: Boolean!\n  createdAt: BigInt!\n  processedAt: BigInt\n}\n\nenum BeneficiaryType {\n  ENROLLED\n  REFERRED\n}\n\nenum ClaimStatus {\n  PENDING\n  PROCESSED\n  REJECTED\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-event-handlers",children:"2. Event Handlers"}),"\n",(0,s.jsxs)(n.p,{children:["Create mapping functions in ",(0,s.jsx)(n.code,{children:"src/mappings/"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/mappings/beneficiary.ts\nimport { BeneficiaryAdded, BeneficiaryRemoved } from '../generated/RahatProject/RahatProject'\nimport { Beneficiary } from '../generated/schema'\n\nexport function handleBeneficiaryAdded(event: BeneficiaryAdded): void {\n  let beneficiary = new Beneficiary(event.params.beneficiary.toHexString())\n  beneficiary.address = event.params.beneficiary\n  beneficiary.name = event.params.name\n  beneficiary.phone = event.params.phone\n  beneficiary.type = event.params.beneficiaryType\n  beneficiary.createdAt = event.block.timestamp\n  beneficiary.updatedAt = event.block.timestamp\n  beneficiary.save()\n}\n\nexport function handleBeneficiaryRemoved(event: BeneficiaryRemoved): void {\n  let beneficiary = Beneficiary.load(event.params.beneficiary.toHexString())\n  if (beneficiary) {\n    beneficiary.updatedAt = event.block.timestamp\n    beneficiary.save()\n  }\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/mappings/token.ts\nimport { Transfer } from '../generated/RahatToken/RahatToken'\nimport { Transfer as TransferEntity, Token, Beneficiary } from '../generated/schema'\n\nexport function handleTransfer(event: Transfer): void {\n  let transfer = new TransferEntity(event.transaction.hash.toHexString())\n  transfer.token = event.address.toHexString()\n  transfer.from = event.params.from.toHexString()\n  transfer.to = event.params.to.toHexString()\n  transfer.amount = event.params.value\n  transfer.timestamp = event.block.timestamp\n  transfer.transactionHash = event.transaction.hash.toHexString()\n  transfer.save()\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-subgraph-manifest",children:"3. Subgraph Manifest"}),"\n",(0,s.jsxs)(n.p,{children:["Configure your subgraph in ",(0,s.jsx)(n.code,{children:"subgraph.yaml"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'specVersion: 0.0.4\nschema:\n  file: ./schema.graphql\ndataSources:\n  - kind: ethereum\n    name: RahatProject\n    network: mainnet\n    source:\n      address: "0x..."\n      abi: RahatProject\n      startBlock: 12345678\n    mapping:\n      kind: ethereum/events\n      apiVersion: 0.0.6\n      language: wasm/assemblyscript\n      entities:\n        - Beneficiary\n        - Project\n        - Claim\n      abis:\n        - name: RahatProject\n          file: ./abis/RahatProject.json\n      eventHandlers:\n        - event: BeneficiaryAdded(indexed address,string,string,uint8)\n          handler: handleBeneficiaryAdded\n        - event: BeneficiaryRemoved(indexed address)\n          handler: handleBeneficiaryRemoved\n        - event: ClaimCreated(indexed address,uint256)\n          handler: handleClaimCreated\n      file: ./src/mappings/beneficiary.ts\n  - kind: ethereum\n    name: RahatToken\n    network: mainnet\n    source:\n      address: "0x..."\n      abi: RahatToken\n      startBlock: 12345678\n    mapping:\n      kind: ethereum/events\n      apiVersion: 0.0.6\n      language: wasm/assemblyscript\n      entities:\n        - Token\n        - Transfer\n      abis:\n        - name: RahatToken\n          file: ./abis/RahatToken.json\n      eventHandlers:\n        - event: Transfer(indexed address,indexed address,uint256)\n          handler: handleTransfer\n      file: ./src/mappings/token.ts\n'})}),"\n",(0,s.jsx)(n.h2,{id:"deployment",children:"Deployment"}),"\n",(0,s.jsx)(n.h3,{id:"local-development",children:"Local Development"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Start Local Graph Node"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker-compose up -d\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Create Local Subgraph"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"graph create --node http://localhost:8020 rahat/local\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Deploy to Local Node"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"graph deploy --node http://localhost:8020 --ipfs http://localhost:5001 rahat/local\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"hosted-service-deployment",children:"Hosted Service Deployment"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Authenticate with Graph Studio"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"graph auth --product hosted-service <ACCESS_TOKEN>\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Deploy to Hosted Service"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"graph deploy --product hosted-service <GITHUB_USERNAME>/<SUBGRAPH_NAME>\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"available-scripts",children:"Available Scripts"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Generate GraphQL types\npnpm graph:codegen\n\n# Build subgraph\npnpm graph:build\n\n# Deploy to hosted service\npnpm graph:deploy\n\n# Local development\npnpm graph:deploy-local\n\n# Create local subgraph\npnpm graph:create-local\n"})}),"\n",(0,s.jsx)(n.h2,{id:"querying-data",children:"Querying Data"}),"\n",(0,s.jsx)(n.h3,{id:"graphql-queries",children:"GraphQL Queries"}),"\n",(0,s.jsx)(n.p,{children:"Once deployed, you can query your subgraph using GraphQL:"}),"\n",(0,s.jsx)(n.h4,{id:"get-all-beneficiaries",children:"Get All Beneficiaries"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"query GetBeneficiaries {\n  beneficiaries {\n    id\n    address\n    name\n    phone\n    type\n    createdAt\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"get-beneficiary-with-claims",children:"Get Beneficiary with Claims"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"query GetBeneficiaryWithClaims($id: ID!) {\n  beneficiary(id: $id) {\n    id\n    name\n    claims {\n      id\n      amount\n      status\n      createdAt\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"get-token-transfers",children:"Get Token Transfers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"query GetTransfers($token: String!) {\n  transfers(where: { token: $token }) {\n    id\n    from {\n      name\n    }\n    to {\n      name\n    }\n    amount\n    timestamp\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"get-project-statistics",children:"Get Project Statistics"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"query GetProjectStats($id: ID!) {\n  project(id: $id) {\n    id\n    name\n    totalAllocated\n    totalDisbursed\n    beneficiaries {\n      id\n      name\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"using-in-applications",children:"Using in Applications"}),"\n",(0,s.jsx)(n.h4,{id:"javascripttypescript",children:"JavaScript/TypeScript"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { GraphQuery } from '@rahataid/el-subgraph';\n\nconst query = `\n  query GetBeneficiaries {\n    beneficiaries {\n      id\n      name\n      type\n    }\n  }\n`;\n\nconst result = await GraphQuery(query, {\n  endpoint: 'YOUR_SUBGRAPH_ENDPOINT',\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"react-hook",children:"React Hook"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { useQuery } from '@apollo/client';\n\nconst GET_BENEFICIARIES = gql`\n  query GetBeneficiaries {\n    beneficiaries {\n      id\n      name\n      type\n    }\n  }\n`;\n\nfunction BeneficiaryList() {\n  const { loading, error, data } = useQuery(GET_BENEFICIARIES);\n  \n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n  \n  return (\n    <ul>\n      {data.beneficiaries.map(beneficiary => (\n        <li key={beneficiary.id}>{beneficiary.name}</li>\n      ))}\n    </ul>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"monitoring-and-maintenance",children:"Monitoring and Maintenance"}),"\n",(0,s.jsx)(n.h3,{id:"health-checks",children:"Health Checks"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Subgraph Status"}),": Monitor indexing status in Graph Studio"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Sync Status"}),": Check if subgraph is synced with latest blocks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Error Logs"}),": Review failed indexing events"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance"}),": Monitor query response times"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsx)(n.h4,{id:"indexing-failures",children:"Indexing Failures"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cause"}),": Invalid event data or mapping errors"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Solution"}),": Check event handlers and entity definitions"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"sync-delays",children:"Sync Delays"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cause"}),": High blockchain activity or network issues"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Solution"}),": Monitor block processing and network status"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"query-timeouts",children:"Query Timeouts"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cause"}),": Complex queries or large datasets"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Solution"}),": Optimize queries and add pagination"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Event Design"}),": Emit events with indexed parameters for efficient querying"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Entity Relationships"}),": Use derived fields to avoid redundant data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pagination"}),": Implement cursor-based pagination for large datasets"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Caching"}),": Cache frequently accessed data in your application"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Error Handling"}),": Implement proper error handling for subgraph queries"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"integration-with-rahat-projects",children:"Integration with Rahat Projects"}),"\n",(0,s.jsx)(n.h3,{id:"c2c-crypto-to-crypto",children:"C2C (Crypto-to-Crypto)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Indexes token transfers and beneficiary events"}),"\n",(0,s.jsx)(n.li,{children:"Tracks multi-signature approvals"}),"\n",(0,s.jsx)(n.li,{children:"Monitors project budget allocations"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"cva-cash-voucher-assistance",children:"CVA (Cash Voucher Assistance)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Indexes claim creation and processing"}),"\n",(0,s.jsx)(n.li,{children:"Tracks vendor registrations and redemptions"}),"\n",(0,s.jsx)(n.li,{children:"Monitors token disbursements"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"aa-anticipatory-action",children:"AA (Anticipatory Action)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Indexes trigger events and forecasts"}),"\n",(0,s.jsx)(n.li,{children:"Tracks automated disbursements"}),"\n",(0,s.jsx)(n.li,{children:"Monitors communication events"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"local-development-issues",children:"Local Development Issues"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Docker Not Running"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker-compose up -d\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Port Conflicts"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Ensure ports 8000-8005, 8020, 5001 are available"}),"\n",(0,s.jsx)(n.li,{children:"Check for existing Graph Node instances"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Authentication Issues"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"graph auth --product hosted-service <NEW_TOKEN>\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"deployment-issues",children:"Deployment Issues"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Invalid ABI"}),": Ensure contract ABIs are up-to-date"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Network Mismatch"}),": Verify network configuration in subgraph.yaml"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Start Block"}),": Set appropriate start block for indexing"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"query-issues",children:"Query Issues"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Schema Mismatch"}),": Regenerate types after schema changes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Missing Entities"}),": Ensure all entities are defined in schema"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Invalid Queries"}),": Use GraphQL playground to test queries"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://thegraph.com/docs/",children:"The Graph Documentation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://studio.thegraph.com/",children:"Graph Studio"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://graphql.org/learn/",children:"GraphQL Playground"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.assemblyscript.org/",children:"AssemblyScript Documentation"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"support",children:"Support"}),"\n",(0,s.jsx)(n.p,{children:"For issues specific to Rahat subgraphs:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Check the project's GitHub repository"}),"\n",(0,s.jsx)(n.li,{children:"Review existing issues and pull requests"}),"\n",(0,s.jsx)(n.li,{children:"Contact the development team"}),"\n",(0,s.jsx)(n.li,{children:"Join the community Discord/Telegram channels"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}}}]);