"use strict";(self.webpackChunkrahat_documentation=self.webpackChunkrahat_documentation||[]).push([[7539],{28453:(e,a,n)=>{n.d(a,{R:()=>s,x:()=>o});var t=n(96540);const r={},i=t.createContext(r);function s(e){const a=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:a},e.children)}},84410:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"Data-and-Integration/External-Oracle-Weather-API-Setup","title":"External Forecast Data Sources","description":"This document provides comprehensive guidance on setting up and integrating external forecast data sources into the Rahat platform. It covers configuration, data processing, monitoring, and best practices for reliable environmental and weather data integration.","source":"@site/dev-docs/Data-and-Integration/04.External-Oracle-Weather-API-Setup.md","sourceDirName":"Data-and-Integration","slug":"/Data-and-Integration/External-Oracle-Weather-API-Setup","permalink":"/dev-docs/Data-and-Integration/External-Oracle-Weather-API-Setup","draft":false,"unlisted":false,"editUrl":"https://github.com/rahataid/rahat-documentation/blob/dev/dev-docs/Data-and-Integration/04.External-Oracle-Weather-API-Setup.md","tags":[],"version":"current","lastUpdatedAt":1754478291000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"External Forecast Data Sources"},"sidebar":"myAutogeneratedSidebar","previous":{"title":"Offramp Service Integration","permalink":"/dev-docs/Data-and-Integration/Offramp-Service-Integration"}}');var r=n(74848),i=n(28453);const s={sidebar_position:4,title:"External Forecast Data Sources"},o="External Forecast Data Sources",l={},d=[{value:"Overview",id:"overview",level:2},{value:"1. Department of Hydrology and Meteorology (DHM)",id:"1-department-of-hydrology-and-meteorology-dhm",level:2},{value:"Purpose",id:"purpose",level:3},{value:"API Integration",id:"api-integration",level:3},{value:"Base Configuration",id:"base-configuration",level:4},{value:"Data Synchronization",id:"data-synchronization",level:4},{value:"API Endpoints Used",id:"api-endpoints-used",level:4},{value:"River Station Data",id:"river-station-data",level:5},{value:"Station Information",id:"station-information",level:5},{value:"Data Processing",id:"data-processing",level:3},{value:"Water Level Monitoring",id:"water-level-monitoring",level:4},{value:"Threshold Comparison Logic",id:"threshold-comparison-logic",level:4},{value:"Use Cases",id:"use-cases",level:3},{value:"1. Flood Early Warning",id:"1-flood-early-warning",level:4},{value:"2. River Monitoring",id:"2-river-monitoring",level:4},{value:"2. Global Flood Awareness System (GLOFAS)",id:"2-global-flood-awareness-system-glofas",level:2},{value:"Purpose",id:"purpose-1",level:3},{value:"API Integration",id:"api-integration-1",level:3},{value:"Base Configuration",id:"base-configuration-1",level:4},{value:"Data Synchronization",id:"data-synchronization-1",level:4},{value:"GLOFAS Data Processing",id:"glofas-data-processing",level:3},{value:"Flood Probability Assessment",id:"flood-probability-assessment",level:4},{value:"Forecast Lead Time Analysis",id:"forecast-lead-time-analysis",level:4},{value:"3. Data Validation and Quality Control",id:"3-data-validation-and-quality-control",level:2},{value:"Data Validation Schema",id:"data-validation-schema",level:3},{value:"Quality Control Checks",id:"quality-control-checks",level:3},{value:"4. Trigger System Integration",id:"4-trigger-system-integration",level:2},{value:"Forecast-Based Triggers",id:"forecast-based-triggers",level:3},{value:"Multi-Source Forecast Triggers",id:"multi-source-forecast-triggers",level:3},{value:"Combined Trigger Assessment",id:"combined-trigger-assessment",level:3},{value:"Fallback Data Sources",id:"fallback-data-sources",level:3}];function c(e){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"external-forecast-data-sources",children:"External Forecast Data Sources"})}),"\n",(0,r.jsx)(a.p,{children:"This document provides comprehensive guidance on setting up and integrating external forecast data sources into the Rahat platform. It covers configuration, data processing, monitoring, and best practices for reliable environmental and weather data integration."}),"\n",(0,r.jsx)(a.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(a.p,{children:"External forecast data sources provide critical real-time environmental and weather data for automated decision-making in humanitarian aid distribution. This setup enables the platform to trigger aid disbursements based on environmental conditions, weather forecasts, and climate monitoring data."}),"\n",(0,r.jsx)(a.h2,{id:"1-department-of-hydrology-and-meteorology-dhm",children:"1. Department of Hydrology and Meteorology (DHM)"}),"\n",(0,r.jsx)(a.h3,{id:"purpose",children:"Purpose"}),"\n",(0,r.jsx)(a.p,{children:"DHM provides real-time hydrological data for river monitoring and flood prediction in Nepal. This service is critical for early warning systems in flood-prone regions."}),"\n",(0,r.jsx)(a.h3,{id:"api-integration",children:"API Integration"}),"\n",(0,r.jsx)(a.h4,{id:"base-configuration",children:"Base Configuration"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-typescript",children:"// Configuration in settings\nDATASOURCE: {\n  DHM: {\n    location: 'Babai at Chepang', // or 'Karnali at Chisapani'\n    url: 'https://bipadportal.gov.np/api/v1'\n  }\n}\n"})}),"\n",(0,r.jsx)(a.h4,{id:"data-synchronization",children:"Data Synchronization"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Frequency"}),": Every 5 minutes"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Method"}),": Automated cron job (",(0,r.jsx)(a.code,{children:"@Cron('*/5 * * * *')"}),")"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Process"}),": Fetches latest water level data and stores in local database"]}),"\n"]}),"\n",(0,r.jsx)(a.h4,{id:"api-endpoints-used",children:"API Endpoints Used"}),"\n",(0,r.jsx)(a.h5,{id:"river-station-data",children:"River Station Data"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-typescript",children:'// GET /api/v1/water-levels\n// Returns: Array of water level readings with timestamps\n{\n  "data": {\n    "results": [\n      {\n        "station": "Babai at Chepang",\n        "waterLevel": 2.45,\n        "timestamp": "2024-01-15T10:30:00Z",\n        "location": "coordinates",\n        "status": "active"\n      }\n    ]\n  }\n}\n'})}),"\n",(0,r.jsx)(a.h5,{id:"station-information",children:"Station Information"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-typescript",children:'// GET /api/v1/stations\n// Returns: List of available monitoring stations\n{\n  "stations": [\n    {\n      "id": "BABAI_001",\n      "name": "Babai at Chepang",\n      "location": "coordinates",\n      "river": "Babai",\n      "status": "active"\n    }\n  ]\n}\n'})}),"\n",(0,r.jsx)(a.h3,{id:"data-processing",children:"Data Processing"}),"\n",(0,r.jsx)(a.h4,{id:"water-level-monitoring",children:"Water Level Monitoring"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-typescript",children:"// Trigger criteria check\nasync criteriaCheck(payload: AddTriggerStatement) {\n  const recentData = await this.prisma.sourcesData.findFirst({\n    where: {\n      location: payload.location,\n      source: 'DHM',\n    },\n    orderBy: { createdAt: 'desc' }\n  });\n\n  const currentLevel = recentData.data.waterLevel;\n  const threshold = payload.triggerStatement?.waterLevel;\n  \n  return this.compareWaterLevels(currentLevel, threshold);\n}\n"})}),"\n",(0,r.jsx)(a.h4,{id:"threshold-comparison-logic",children:"Threshold Comparison Logic"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-typescript",children:"compareWaterLevels(currentLevel: number, threshold: number): boolean {\n  // Trigger when water level exceeds threshold\n  return currentLevel >= threshold;\n}\n"})}),"\n",(0,r.jsx)(a.h3,{id:"use-cases",children:"Use Cases"}),"\n",(0,r.jsx)(a.h4,{id:"1-flood-early-warning",children:"1. Flood Early Warning"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Trigger Condition"}),": Water level > 3.5 meters"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Response"}),": Immediate beneficiary notification"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Lead Time"}),": 2-6 hours depending on river flow"]}),"\n"]}),"\n",(0,r.jsx)(a.h4,{id:"2-river-monitoring",children:"2. River Monitoring"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Continuous Monitoring"}),": 24/7 water level tracking"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Data Storage"}),": Historical data for trend analysis"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Alert System"}),": Automated notifications for threshold breaches"]}),"\n"]}),"\n",(0,r.jsx)(a.h2,{id:"2-global-flood-awareness-system-glofas",children:"2. Global Flood Awareness System (GLOFAS)"}),"\n",(0,r.jsx)(a.h3,{id:"purpose-1",children:"Purpose"}),"\n",(0,r.jsx)(a.p,{children:"GLOFAS provides global flood forecasting data with probability assessments and lead time analysis. This service enables advanced flood prediction with longer lead times than local monitoring."}),"\n",(0,r.jsx)(a.h3,{id:"api-integration-1",children:"API Integration"}),"\n",(0,r.jsx)(a.h4,{id:"base-configuration-1",children:"Base Configuration"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-typescript",children:'// Configuration in settings\nDATASOURCE: {\n  GLOFAS: {\n    location: \'Babai at Chepang\',\n    url: "https://ows.globalfloods.eu/glofas-ows/ows.py",\n    bbox: "9066450.71499904,3117815.425733483,9405627.288509797,3456991.999244238",\n    i: "89", // coordinate for station\n    j: "409"\n  }\n}\n'})}),"\n",(0,r.jsx)(a.h4,{id:"data-synchronization-1",children:"Data Synchronization"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Frequency"}),": Every hour"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Method"}),": Automated cron job (",(0,r.jsx)(a.code,{children:"@Cron('0 * * * *')"}),")"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Process"}),": Fetches forecast data and stores with date tracking"]}),"\n"]}),"\n",(0,r.jsx)(a.h3,{id:"glofas-data-processing",children:"GLOFAS Data Processing"}),"\n",(0,r.jsx)(a.h4,{id:"flood-probability-assessment",children:"Flood Probability Assessment"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-typescript",children:"async assessFloodProbability(location: string): Promise<number> {\n  const glofasData = await this.getGLOFASData(location);\n  return this.calculateFloodProbability(glofasData);\n}\n"})}),"\n",(0,r.jsx)(a.h4,{id:"forecast-lead-time-analysis",children:"Forecast Lead Time Analysis"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-typescript",children:"async analyzeLeadTime(location: string): Promise<number> {\n  const forecastData = await this.getGLOFASForecast(location);\n  return this.calculateLeadTime(forecastData);\n}\n"})}),"\n",(0,r.jsx)(a.h2,{id:"3-data-validation-and-quality-control",children:"3. Data Validation and Quality Control"}),"\n",(0,r.jsx)(a.h3,{id:"data-validation-schema",children:"Data Validation Schema"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-typescript",children:"interface ForecastDataValidation {\n  required: boolean;\n  dataType: 'number' | 'string' | 'object' | 'array';\n  minValue?: number;\n  maxValue?: number;\n  format?: string;\n  customValidation?: (data: any) => boolean;\n}\n\nconst validationSchemas = {\n  waterLevel: {\n    required: true,\n    dataType: 'number',\n    minValue: 0,\n    maxValue: 50\n  },\n  floodProbability: {\n    required: true,\n    dataType: 'number',\n    minValue: 0,\n    maxValue: 1\n  },\n  leadTime: {\n    required: true,\n    dataType: 'number',\n    minValue: 0,\n    maxValue: 168 // 7 days in hours\n  }\n};\n"})}),"\n",(0,r.jsx)(a.h3,{id:"quality-control-checks",children:"Quality Control Checks"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-typescript",children:"async validateForecastDataQuality(sourceName: string, data: any): Promise<boolean> {\n  // Check for missing data\n  if (!data || Object.keys(data).length === 0) {\n    return false;\n  }\n  \n  // Check for stale data\n  const dataAge = Date.now() - new Date(data.timestamp).getTime();\n  if (dataAge > this.getMaxDataAge(sourceName)) {\n    return false;\n  }\n  \n  // Check for reasonable values\n  return this.validateDataRange(data);\n}\n"})}),"\n",(0,r.jsx)(a.h2,{id:"4-trigger-system-integration",children:"4. Trigger System Integration"}),"\n",(0,r.jsx)(a.h3,{id:"forecast-based-triggers",children:"Forecast-Based Triggers"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-typescript",children:"interface ForecastTrigger {\n  sourceName: string;\n  condition: 'greater_than' | 'less_than' | 'equals' | 'contains';\n  threshold: number | string;\n  field: string;\n  action: 'disburse_aid' | 'send_alert' | 'activate_protocol';\n  leadTime?: number; // hours\n}\n\nasync evaluateForecastTrigger(trigger: ForecastTrigger): Promise<boolean> {\n  const forecastData = await this.getLatestForecastData(trigger.sourceName);\n  const currentValue = this.extractFieldValue(forecastData, trigger.field);\n  \n  return this.compareValues(currentValue, trigger.condition, trigger.threshold);\n}\n"})}),"\n",(0,r.jsx)(a.h3,{id:"multi-source-forecast-triggers",children:"Multi-Source Forecast Triggers"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-typescript",children:"async evaluateMultiSourceForecastTrigger(triggers: ForecastTrigger[]): Promise<boolean> {\n  const results = await Promise.all(\n    triggers.map(trigger => this.evaluateForecastTrigger(trigger))\n  );\n  \n  // All triggers must be true for multi-source trigger\n  return results.every(result => result === true);\n}\n"})}),"\n",(0,r.jsx)(a.h3,{id:"combined-trigger-assessment",children:"Combined Trigger Assessment"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-typescript",children:"// Combined trigger assessment\nasync assessTriggerConditions(location: string, triggerConfig: TriggerConfig) {\n  const dhmData = await this.getDHMData(location);\n  const glofasData = await this.getGLOFASData(location);\n  \n  // DHM immediate trigger\n  const dhmTriggered = this.checkDHMThreshold(dhmData, triggerConfig.dhmThreshold);\n  \n  // GLOFAS probability trigger\n  const glofasTriggered = this.checkGLOFASProbability(glofasData, triggerConfig.probabilityThreshold);\n  \n  return {\n    immediateTrigger: dhmTriggered,\n    forecastTrigger: glofasTriggered,\n    combinedRisk: this.calculateCombinedRisk(dhmData, glofasData)\n  };\n}\n"})}),"\n",(0,r.jsx)(a.h3,{id:"fallback-data-sources",children:"Fallback Data Sources"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-typescript",children:"async getDataWithFallback(primarySource: string, fallbackSource: string): Promise<any> {\n  try {\n    return await this.fetchForecastData(primarySource);\n  } catch (error) {\n    this.logger.warn(`Primary source ${primarySource} failed, using fallback`);\n    return await this.fetchForecastData(fallbackSource);\n  }\n}\n"})}),"\n",(0,r.jsx)(a.p,{children:"This documentation provides a comprehensive guide for setting up and maintaining external forecast data sources (DHM and GLOFAS) in the Rahat platform, ensuring reliable and secure environmental data processing for automated humanitarian aid distribution."})]})}function g(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);