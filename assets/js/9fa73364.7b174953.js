"use strict";(self.webpackChunkrahat_documentation=self.webpackChunkrahat_documentation||[]).push([[674],{28453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>a});var r=i(96540);const t={},s=r.createContext(t);function c(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),r.createElement(s.Provider,{value:n},e.children)}},86741:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"Core-Modules/Rahat-Microservice-Management","title":"Rahat Microservice Management","description":"Overview","source":"@site/dev-docs/Core-Modules/04.Rahat-Microservice-Management.md","sourceDirName":"Core-Modules","slug":"/Core-Modules/Rahat-Microservice-Management","permalink":"/dev-docs/Core-Modules/Rahat-Microservice-Management","draft":false,"unlisted":false,"editUrl":"https://github.com/rahataid/rahat-documentation/blob/dev/dev-docs/Core-Modules/04.Rahat-Microservice-Management.md","tags":[],"version":"current","lastUpdatedAt":1754880255000,"sidebarPosition":6,"frontMatter":{"sidebar_position":6,"title":"Rahat Microservice Management"},"sidebar":"myAutogeneratedSidebar","previous":{"title":"Custodial Wallet Service","permalink":"/dev-docs/Core-Modules/Custodial-Wallet-Service"},"next":{"title":"Rahat Users Management","permalink":"/dev-docs/Core-Modules/Rahat-Users-Management"}}');var t=i(74848),s=i(28453);const c={sidebar_position:6,title:"Rahat Microservice Management"},a="Rahat Microservice Management",o={},l=[{value:"Overview",id:"overview",level:2},{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"Service Communication Pattern",id:"service-communication-pattern",level:3},{value:"Core Platform (<code>apps/rahat</code>)",id:"core-platform-appsrahat",level:2},{value:"Main Application Structure",id:"main-application-structure",level:3},{value:"1. Application Bootstrap (<code>main.ts</code>)",id:"1-application-bootstrap-maints",level:4},{value:"2. Module Architecture (<code>app.module.ts</code>)",id:"2-module-architecture-appmodulets",level:4},{value:"Project Management System",id:"project-management-system",level:2},{value:"Project Lifecycle",id:"project-lifecycle",level:3},{value:"1. Project Creation",id:"1-project-creation",level:4},{value:"2. Project Types and Actions",id:"2-project-types-and-actions",level:4},{value:"Project Actions System",id:"project-actions-system",level:3},{value:"Action Categories",id:"action-categories",level:4},{value:"Project-Specific Actions",id:"project-specific-actions",level:4},{value:"Microservice Communication",id:"microservice-communication",level:2},{value:"1. Redis-based Communication",id:"1-redis-based-communication",level:3},{value:"2. Command Pattern",id:"2-command-pattern",level:3},{value:"3. Event-Driven Architecture",id:"3-event-driven-architecture",level:3},{value:"Queue Management System",id:"queue-management-system",level:2},{value:"Bull Queue Integration",id:"bull-queue-integration",level:3},{value:"Queue Types",id:"queue-types",level:4},{value:"Queue Service",id:"queue-service",level:4},{value:"Project Coordination",id:"project-coordination",level:2},{value:"1. Project-Beneficiary Management",id:"1-project-beneficiary-management",level:3},{value:"2. Project-Vendor Coordination",id:"2-project-vendor-coordination",level:3},{value:"3. Project-Token Integration",id:"3-project-token-integration",level:3},{value:"Event Listeners and Processors",id:"event-listeners-and-processors",level:2},{value:"1. Event Listeners",id:"1-event-listeners",level:3},{value:"2. Job Processors",id:"2-job-processors",level:3},{value:"Security and Access Control",id:"security-and-access-control",level:2},{value:"1. Authentication",id:"1-authentication",level:3},{value:"2. External App Guard",id:"2-external-app-guard",level:3},{value:"Configuration Management",id:"configuration-management",level:2},{value:"1. Environment Configuration",id:"1-environment-configuration",level:3},{value:"2. Settings Module",id:"2-settings-module",level:3},{value:"Monitoring and Observability",id:"monitoring-and-observability",level:2},{value:"1. Logging",id:"1-logging",level:3},{value:"2. Swagger Documentation",id:"2-swagger-documentation",level:3},{value:"Deployment and Scaling",id:"deployment-and-scaling",level:2},{value:"1. Microservice Independence",id:"1-microservice-independence",level:3},{value:"2. Redis Clustering",id:"2-redis-clustering",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Error Handling",id:"1-error-handling",level:3},{value:"2. Performance Optimization",id:"2-performance-optimization",level:3},{value:"3. Data Consistency",id:"3-data-consistency",level:3},{value:"Integration Patterns",id:"integration-patterns",level:2},{value:"1. External Service Integration",id:"1-external-service-integration",level:3},{value:"2. API Gateway Pattern",id:"2-api-gateway-pattern",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"rahat-microservice-management",children:"Rahat Microservice Management"})}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The Rahat platform is built on a microservices architecture that enables scalable, distributed processing of humanitarian aid operations. The core platform (",(0,t.jsx)(n.code,{children:"apps/rahat"}),") serves as the main orchestrator, coordinating communication between various specialized microservices."]}),"\n",(0,t.jsx)(n.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,t.jsx)(n.h3,{id:"service-communication-pattern",children:"Service Communication Pattern"}),"\n",(0,t.jsxs)(n.p,{children:["The Rahat platform uses a ",(0,t.jsx)(n.strong,{children:"hybrid communication pattern"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Redis-based Microservices"}),": For real-time, event-driven communication"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Bull Queues"}),": For background job processing and task management"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Event Emitter"}),": For internal service event handling"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"REST APIs"}),": For external integrations and web interfaces"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"core-platform-appsrahat",children:["Core Platform (",(0,t.jsx)(n.code,{children:"apps/rahat"}),")"]}),"\n",(0,t.jsx)(n.h3,{id:"main-application-structure",children:"Main Application Structure"}),"\n",(0,t.jsx)(n.p,{children:"The Rahat core platform is built using NestJS with the following key components:"}),"\n",(0,t.jsxs)(n.h4,{id:"1-application-bootstrap-maints",children:["1. Application Bootstrap (",(0,t.jsx)(n.code,{children:"main.ts"}),")"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Microservice configuration with Redis transport\nconst microservice = app.connectMicroservice<MicroserviceOptions>({\n  transport: Transport.REDIS,\n  options: {\n    host: configService.get('REDIS_HOST'),\n    port: configService.get('REDIS_PORT'),\n    password: configService.get('REDIS_PASSWORD'),\n  },\n});\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"2-module-architecture-appmodulets",children:["2. Module Architecture (",(0,t.jsx)(n.code,{children:"app.module.ts"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"The core platform integrates multiple modules:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"BeneficiaryModule"}),": Manages beneficiary operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ProjectModule"}),": Handles project lifecycle and coordination"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"QueueModule"}),": Manages background job processing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ProcessorsModule"}),": Handles job processing and meta-transactions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ListenersModule"}),": Event-driven communication"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"TokenModule"}),": Token management and blockchain integration"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"VendorsModule"}),": Vendor and stakeholder management"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"OfframpModule"}),": Cash-out and redemption services"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"project-management-system",children:"Project Management System"}),"\n",(0,t.jsx)(n.h3,{id:"project-lifecycle",children:"Project Lifecycle"}),"\n",(0,t.jsx)(n.p,{children:"Projects in Rahat represent humanitarian aid initiatives with the following lifecycle:"}),"\n",(0,t.jsx)(n.h4,{id:"1-project-creation",children:"1. Project Creation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Project creation with type-specific configurations\nasync create(data: CreateProjectDto) {\n  const project = await this.prisma.project.create({\n    data,\n  });\n  \n  this.eventEmitter.emit(ProjectEvents.PROJECT_CREATED, project);\n  return project;\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"2-project-types-and-actions",children:"2. Project Types and Actions"}),"\n",(0,t.jsx)(n.p,{children:"The platform supports multiple project types with specialized actions:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"AA (Account Abstraction)"}),": Smart contract-based projects"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"CVA (Cash and Voucher Assistance)"}),": Direct cash transfers"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"EL (Emergency Livelihood)"}),": Emergency response projects"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"C2C (Cash to Cash)"}),": Peer-to-peer transfers"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cambodia"}),": Country-specific implementations"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"project-actions-system",children:"Project Actions System"}),"\n",(0,t.jsx)(n.p,{children:"The project management uses an action-based system for microservice communication:"}),"\n",(0,t.jsx)(n.h4,{id:"action-categories",children:"Action Categories"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Common actions available across all project types\nexport const beneficiaryActions: ProjectActionFunc = {\n  [MS_ACTIONS.BENEFICIARY.ADD_TO_PROJECT]: (uuid, payload, sendCommand) => {\n    return sendCommand(\n      { cmd: BeneficiaryJobs.ADD_TO_PROJECT },\n      { dto: payload, projectUid: uuid }\n    )\n  },\n  [MS_ACTIONS.BENEFICIARY.BULK_ADD_TO_PROJECT]: (uuid, payload, sendCommand) => {\n    return sendCommand(\n      { cmd: BeneficiaryJobs.BULK_ADD_TO_PROJECT },\n      { dto: payload, projectUid: uuid }\n    )\n  },\n  // ... more actions\n};\n"})}),"\n",(0,t.jsx)(n.h4,{id:"project-specific-actions",children:"Project-Specific Actions"}),"\n",(0,t.jsx)(n.p,{children:"Each project type has specialized actions:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"AA Actions"}),": Smart contract interactions, meta-transactions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"CVA Actions"}),": Cash voucher management, redemption"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"EL Actions"}),": Emergency response coordination"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cambodia Actions"}),": Country-specific implementations"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"microservice-communication",children:"Microservice Communication"}),"\n",(0,t.jsx)(n.h3,{id:"1-redis-based-communication",children:"1. Redis-based Communication"}),"\n",(0,t.jsx)(n.p,{children:"The platform uses Redis for inter-service communication:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Client configuration for microservice communication\nClientsModule.registerAsync([\n  {\n    name: 'RAHAT_CLIENT',\n    useFactory: (configService: ConfigService) => ({\n      transport: Transport.REDIS,\n      options: {\n        host: configService.get('REDIS_HOST'),\n        port: configService.get('REDIS_PORT'),\n        password: configService.get('REDIS_PASSWORD'),\n      },\n    }),\n    inject: [ConfigService],\n  },\n]);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-command-pattern",children:"2. Command Pattern"}),"\n",(0,t.jsx)(n.p,{children:"Services communicate using a command pattern:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"async sendCommand(\n  cmd,\n  payload,\n  timeoutValue = MS_TIMEOUT,\n  client: ClientProxy,\n  action: string,\n  user: any\n) {\n  return client.send(cmd, payload).pipe(\n    timeout(timeoutValue),\n    tap((response) => {\n      this.sendSucessMessage(uuid, payload);\n    }),\n    catchError((error) => {\n      // Error handling\n    })\n  );\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-event-driven-architecture",children:"3. Event-Driven Architecture"}),"\n",(0,t.jsx)(n.p,{children:"The platform uses event emitters for internal communication:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Event emission for project creation\n@OnEvent(ProjectEvents.PROJECT_CREATED)\nasync onProjectCreated(data: Project) {\n  this.projectQueue.add(ProjectJobs.PROJECT_CREATE, data, {\n    attempts: 3,\n    backoff: {\n      type: 'exponential',\n      delay: 2000,\n    },\n  });\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"queue-management-system",children:"Queue Management System"}),"\n",(0,t.jsx)(n.h3,{id:"bull-queue-integration",children:"Bull Queue Integration"}),"\n",(0,t.jsx)(n.p,{children:"The platform uses Bull queues for background job processing:"}),"\n",(0,t.jsx)(n.h4,{id:"queue-types",children:"Queue Types"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"RAHAT Queue"}),": Core platform jobs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"RAHAT_BENEFICIARY Queue"}),": Beneficiary processing jobs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"META_TXN Queue"}),": Meta-transaction processing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"CONTRACT Queue"}),": Smart contract interactions"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"queue-service",children:"Queue Service"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"@Injectable()\nexport class QueueService {\n  constructor(\n    @InjectQueue('CONTRACT') private readonly contractQueue: Queue,\n    @InjectQueue(BQUEUE.RAHAT) private readonly rahatQueue: Queue,\n    @InjectQueue(BQUEUE.RAHAT_BENEFICIARY) private readonly rahatBeneficiaryQueue: Queue,\n    @InjectQueue(BQUEUE.META_TXN) private readonly metaTransactionQueue: Queue\n  ) {}\n\n  async getJobs(queue: Queue, filters: JobFilterOptions = {}) {\n    // Job retrieval with filtering\n  }\n\n  async retryJob(queue: Queue, jobId: string | number | UUID) {\n    // Job retry functionality\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"project-coordination",children:"Project Coordination"}),"\n",(0,t.jsx)(n.h3,{id:"1-project-beneficiary-management",children:"1. Project-Beneficiary Management"}),"\n",(0,t.jsx)(n.p,{children:"Projects coordinate with the beneficiary microservice for:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Beneficiary Assignment"}),": Adding beneficiaries to projects"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Bulk Operations"}),": Mass beneficiary management"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Group Management"}),": Organizing beneficiaries into groups"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Data Synchronization"}),": Keeping beneficiary data in sync"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2-project-vendor-coordination",children:"2. Project-Vendor Coordination"}),"\n",(0,t.jsx)(n.p,{children:"Projects manage vendor relationships through:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Vendor Assignment"}),": Linking vendors to projects"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Service Provision"}),": Coordinating vendor services"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance Tracking"}),": Monitoring vendor activities"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"3-project-token-integration",children:"3. Project-Token Integration"}),"\n",(0,t.jsx)(n.p,{children:"Projects integrate with token management for:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Token Selection"}),": Choosing appropriate tokens for projects"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Smart Contract Integration"}),": Blockchain interactions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Meta-Transaction Processing"}),": Gasless transactions"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"event-listeners-and-processors",children:"Event Listeners and Processors"}),"\n",(0,t.jsx)(n.h3,{id:"1-event-listeners",children:"1. Event Listeners"}),"\n",(0,t.jsx)(n.p,{children:"The platform uses event listeners for reactive programming:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"@Injectable()\nexport class ListenersService {\n  @OnEvent(EVENTS.OTP_CREATED)\n  async sendOTPEmail(data: any) {\n    // Handle OTP creation events\n  }\n\n  @OnEvent(ProjectEvents.PROJECT_CREATED)\n  async onProjectCreated(data: Project) {\n    // Handle project creation events\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-job-processors",children:"2. Job Processors"}),"\n",(0,t.jsx)(n.p,{children:"Background job processing for heavy operations:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"@Processor(BQUEUE.META_TXN)\nexport class MetaTransactionProcessor {\n  @Process(ProjectJobs.META_TXN_PROCESS)\n  async processMetaTransaction(job: Job) {\n    // Process meta-transactions\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"security-and-access-control",children:"Security and Access Control"}),"\n",(0,t.jsx)(n.h3,{id:"1-authentication",children:"1. Authentication"}),"\n",(0,t.jsx)(n.p,{children:"The platform uses JWT-based authentication with role-based access control:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"@UseGuards(JwtGuard, AbilitiesGuard)\n@CheckAbilities({ actions: ACTIONS.READ, subject: SUBJECTS.PUBLIC })\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-external-app-guard",children:"2. External App Guard"}),"\n",(0,t.jsx)(n.p,{children:"Special guard for external application access:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"{\n  provide: APP_GUARD,\n  useClass: ExternalAppGuard,\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"configuration-management",children:"Configuration Management"}),"\n",(0,t.jsx)(n.h3,{id:"1-environment-configuration",children:"1. Environment Configuration"}),"\n",(0,t.jsx)(n.p,{children:"The platform uses environment-based configuration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"ConfigModule.forRoot({ isGlobal: true })\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-settings-module",children:"2. Settings Module"}),"\n",(0,t.jsx)(n.p,{children:"Dynamic configuration management through the settings module:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"SettingsModule\n"})}),"\n",(0,t.jsx)(n.h2,{id:"monitoring-and-observability",children:"Monitoring and Observability"}),"\n",(0,t.jsx)(n.h3,{id:"1-logging",children:"1. Logging"}),"\n",(0,t.jsx)(n.p,{children:"Winston-based logging with structured logging:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"logger: WinstonModule.createLogger({\n  instance: loggerInstance,\n}),\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-swagger-documentation",children:"2. Swagger Documentation"}),"\n",(0,t.jsx)(n.p,{children:"API documentation for development and testing:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const config = new DocumentBuilder()\n  .setTitle('Rahat Core')\n  .setDescription('API service for Rahat Core')\n  .setVersion('1.0')\n  .addBearerAuth()\n  .build();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"deployment-and-scaling",children:"Deployment and Scaling"}),"\n",(0,t.jsx)(n.h3,{id:"1-microservice-independence",children:"1. Microservice Independence"}),"\n",(0,t.jsx)(n.p,{children:"Each microservice can be deployed independently:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Beneficiary Service"}),": Dedicated beneficiary management"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Core Platform"}),": Main orchestration service"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Queue Workers"}),": Scalable job processing"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2-redis-clustering",children:"2. Redis Clustering"}),"\n",(0,t.jsx)(n.p,{children:"Redis-based communication enables horizontal scaling:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pub/Sub"}),": Real-time communication"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Job Queues"}),": Distributed task processing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Caching"}),": Performance optimization"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"1-error-handling",children:"1. Error Handling"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"RPC Exception Filter"}),": Centralized error handling"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Timeout Management"}),": Preventing hanging requests"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Retry Mechanisms"}),": Automatic job retries"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2-performance-optimization",children:"2. Performance Optimization"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Connection Pooling"}),": Efficient Redis connections"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Job Batching"}),": Bulk operations for efficiency"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Caching"}),": Redis-based caching strategies"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"3-data-consistency",children:"3. Data Consistency"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Event Sourcing"}),": Event-driven data consistency"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Transaction Management"}),": Database transaction handling"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Synchronization"}),": Cross-service data sync"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"integration-patterns",children:"Integration Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"1-external-service-integration",children:"1. External Service Integration"}),"\n",(0,t.jsx)(n.p,{children:"The platform integrates with various external services:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Blockchain Networks"}),": Smart contract interactions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Payment Providers"}),": Cash-out services"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Communication Services"}),": SMS, email, WhatsApp"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Data Providers"}),": Kobo, ODK, and other data sources"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2-api-gateway-pattern",children:"2. API Gateway Pattern"}),"\n",(0,t.jsx)(n.p,{children:"The core platform acts as an API gateway:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Request Routing"}),": Directing requests to appropriate services"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Authentication"}),": Centralized auth management"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rate Limiting"}),": API usage control"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Monitoring"}),": Request tracking and analytics"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This microservice architecture enables the Rahat platform to handle complex humanitarian aid operations with scalability, reliability, and maintainability."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);