"use strict";(self.webpackChunkrahat_documentation=self.webpackChunkrahat_documentation||[]).push([[2277],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(96540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}},84719:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"Project-Modules/Anticipatory-Action/Supported-Blockchains","title":"Supported Blockchains","description":"This document provides detailed information about the blockchain networks supported by the Rahat Anticipatory Action platform, including Stellar Soroban, EVM-compatible networks, and their integration patterns.","source":"@site/dev-docs/Project-Modules/01.Anticipatory-Action/06.Supported-Blockchains.md","sourceDirName":"Project-Modules/01.Anticipatory-Action","slug":"/Project-Modules/Anticipatory-Action/Supported-Blockchains","permalink":"/dev-docs/Project-Modules/Anticipatory-Action/Supported-Blockchains","draft":false,"unlisted":false,"editUrl":"https://github.com/rahataid/rahat-documentation/blob/dev/dev-docs/Project-Modules/01.Anticipatory-Action/06.Supported-Blockchains.md","tags":[],"version":"current","lastUpdatedAt":1753960334000,"sidebarPosition":6,"frontMatter":{"sidebar_position":6,"title":"Supported Blockchains"},"sidebar":"myAutogeneratedSidebar","previous":{"title":"Communication Services","permalink":"/dev-docs/Project-Modules/Anticipatory-Action/Comunication-Services"},"next":{"title":"Introduction","permalink":"/dev-docs/Project-Modules/Introduction"}}');var i=t(74848),s=t(28453);const a={sidebar_position:6,title:"Supported Blockchains"},o="Supported Blockchains",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Core Components",id:"core-components",level:3},{value:"1. Chain Service Interface",id:"1-chain-service-interface",level:4},{value:"2. Stellar Integration",id:"2-stellar-integration",level:4},{value:"3. EVM Integration",id:"3-evm-integration",level:4},{value:"1. Stellar Network",id:"1-stellar-network",level:2},{value:"Overview",id:"overview-1",level:3},{value:"Key Features",id:"key-features",level:3},{value:"Transaction Characteristics",id:"transaction-characteristics",level:4},{value:"Asset Management",id:"asset-management",level:4},{value:"Smart Contracts (Soroban)",id:"smart-contracts-soroban",level:3},{value:"Contract Structure",id:"contract-structure",level:4},{value:"Contract Deployment",id:"contract-deployment",level:4},{value:"Stellar Service Integration",id:"stellar-service-integration",level:3},{value:"Service Structure",id:"service-structure",level:4},{value:"Token Operations",id:"token-operations",level:4},{value:"Stellar Configuration",id:"stellar-configuration",level:3},{value:"Environment Settings",id:"environment-settings",level:4},{value:"Network Configuration",id:"network-configuration",level:4},{value:"2. EVM-Compatible Networks",id:"2-evm-compatible-networks",level:2},{value:"Overview",id:"overview-2",level:3},{value:"Supported Networks",id:"supported-networks",level:3},{value:"1. Polygon (Amoy Testnet)",id:"1-polygon-amoy-testnet",level:4},{value:"2. Arbitrum (Sepolia Testnet)",id:"2-arbitrum-sepolia-testnet",level:4},{value:"3. Ethereum (Mainnet)",id:"3-ethereum-mainnet",level:4},{value:"Smart Contracts (Solidity)",id:"smart-contracts-solidity",level:3},{value:"Contract Structure",id:"contract-structure-1",level:4},{value:"Contract Deployment",id:"contract-deployment-1",level:4},{value:"EVM Service Integration",id:"evm-service-integration",level:3},{value:"Chain Service Implementation",id:"chain-service-implementation",level:4},{value:"EVM Configuration",id:"evm-configuration",level:3},{value:"Environment Variables",id:"environment-variables",level:4},{value:"Network Configuration",id:"network-configuration-1",level:4},{value:"Chain Selection Strategy",id:"chain-selection-strategy",level:2},{value:"When to Use Stellar Soroban",id:"when-to-use-stellar-soroban",level:3},{value:"Advantages",id:"advantages",level:4},{value:"Use Cases",id:"use-cases",level:4},{value:"When to Use EVM Networks",id:"when-to-use-evm-networks",level:3},{value:"Advantages",id:"advantages-1",level:4},{value:"Use Cases",id:"use-cases-1",level:4},{value:"Cross-Chain Operations",id:"cross-chain-operations",level:2},{value:"Chain Registry System",id:"chain-registry-system",level:3},{value:"Multi-Chain Configuration",id:"multi-chain-configuration",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Private Key Management",id:"private-key-management",level:3},{value:"Transaction Signing",id:"transaction-signing",level:3},{value:"Monitoring and Analytics",id:"monitoring-and-analytics",level:2},{value:"Blockchain Metrics",id:"blockchain-metrics",level:3},{value:"Transaction Monitoring",id:"transaction-monitoring",level:3},{value:"Testing",id:"testing",level:2},{value:"Unit Tests",id:"unit-tests",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"supported-blockchains",children:"Supported Blockchains"})}),"\n",(0,i.jsx)(n.p,{children:"This document provides detailed information about the blockchain networks supported by the Rahat Anticipatory Action platform, including Stellar Soroban, EVM-compatible networks, and their integration patterns."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"The platform supports dual blockchain architecture, allowing deployment on both Stellar Soroban and EVM-compatible networks. This provides flexibility in choosing the most suitable blockchain for specific use cases and regional requirements."}),"\n",(0,i.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,i.jsx)(n.h3,{id:"core-components",children:"Core Components"}),"\n",(0,i.jsx)(n.h4,{id:"1-chain-service-interface",children:"1. Chain Service Interface"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),": Abstract blockchain operations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Location"}),": ",(0,i.jsx)(n.code,{children:"apps/aa/src/chain/interfaces/chain-service.interface.ts"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Features"}),": Unified interface for different blockchain implementations"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"2-stellar-integration",children:"2. Stellar Integration"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),": Primary blockchain for token operations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Features"}),": Soroban smart contracts, native asset management"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SDK"}),": Stellar SDK with Soroban support"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"3-evm-integration",children:"3. EVM Integration"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),": Alternative blockchain deployment options"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Features"}),": Solidity smart contracts, DeFi integration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SDK"}),": Ethers.js for EVM-compatible networks"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"1-stellar-network",children:"1. Stellar Network"}),"\n",(0,i.jsx)(n.h3,{id:"overview-1",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"Stellar is the primary blockchain for the platform, offering fast transactions, low costs, and native asset support. The platform leverages Stellar's Soroban smart contract platform for advanced functionality."}),"\n",(0,i.jsx)(n.h3,{id:"key-features",children:"Key Features"}),"\n",(0,i.jsx)(n.h4,{id:"transaction-characteristics",children:"Transaction Characteristics"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Finality"}),": 3-5 seconds"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Transaction Cost"}),": ~0.00001 XLM per operation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Throughput"}),": 1,000+ transactions per second"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consensus"}),": Stellar Consensus Protocol (SCP)"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"asset-management",children:"Asset Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Stellar asset configuration\ninterface StellarAsset {\n  code: 'RAHAT';\n  issuer: string; // Stellar account that issues the asset\n  network: 'TESTNET' | 'PUBLIC';\n  decimals: 7;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"smart-contracts-soroban",children:"Smart Contracts (Soroban)"}),"\n",(0,i.jsx)(n.h4,{id:"contract-structure",children:"Contract Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"// soroban/trigger/contracts/trigger-manager/src/lib.rs\n#[contract]\npub struct TriggerManager;\n\n#[contractimpl]\nimpl TriggerManager {\n    pub fn initialize(env: Env, admin: Address) -> Result<(), Error> {\n        // Initialize contract with admin\n        Ok(())\n    }\n\n    pub fn create_trigger(\n        env: Env,\n        trigger_id: String,\n        conditions: Vec<String>,\n        actions: Vec<String>\n    ) -> Result<(), Error> {\n        // Create new trigger with conditions and actions\n        Ok(())\n    }\n\n    pub fn execute_trigger(env: Env, trigger_id: String) -> Result<(), Error> {\n        // Execute trigger when conditions are met\n        Ok(())\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"contract-deployment",children:"Contract Deployment"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Build Soroban contract\ncd soroban/trigger\nstellar contract build\n\n# Deploy to Stellar network\nstellar contract deploy --network testnet target/wasm32-unknown-unknown/release/trigger_manager.wasm\n"})}),"\n",(0,i.jsx)(n.h3,{id:"stellar-service-integration",children:"Stellar Service Integration"}),"\n",(0,i.jsx)(n.h4,{id:"service-structure",children:"Service Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// apps/aa/src/stellar/stellar.service.ts\n@Injectable()\nexport class StellarService {\n  constructor(\n    private readonly receiveService: ReceiveService,\n    private readonly transactionService: TransactionService,\n    private readonly disbursementServices: DisbursementServices\n  ) {}\n\n  async transferTokens(data: TransferTokensDto): Promise<any> {\n    return this.transactionService.transferTokens(\n      data.fromAddress,\n      data.toAddress,\n      data.amount,\n      data.assetCode\n    );\n  }\n\n  async fundAccount(data: FundAccountDto): Promise<any> {\n    return this.receiveService.fundAccount(\n      data.address,\n      data.amount,\n      data.assetCode\n    );\n  }\n\n  async disburse(data: DisburseDto): Promise<any> {\n    return this.disbursementServices.disburse(data);\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"token-operations",children:"Token Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Token transfer operations\nasync transferTokensToBeneficiary(\n  fromAddress: string,\n  toAddress: string,\n  amount: number\n): Promise<TransactionResult> {\n  const result = await this.stellarService.transferTokens({\n    fromAddress,\n    toAddress,\n    amount,\n    assetCode: 'RAHAT',\n    assetIssuer: process.env.STELLAR_ASSET_ISSUER\n  });\n\n  return {\n    transactionHash: result.hash,\n    status: 'success',\n    amount,\n    fromAddress,\n    toAddress\n  };\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"stellar-configuration",children:"Stellar Configuration"}),"\n",(0,i.jsx)(n.h4,{id:"environment-settings",children:"Environment Settings"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Stellar settings configuration\ninterface StellarSettings {\n  ASSETCREATOR: string;\n  ASSETCODE: string;\n  NETWORK: 'TESTNET' | 'PUBLIC';\n  FAUCETSECRETKEY: string;\n  FUNDINGAMOUNT: string;\n  HORIZONURL: string;\n  BASEURL: string;\n  ADMINBASEURL: string;\n  EMAIL: string;\n  PASSWORD: string;\n  TENANTNAME: string;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"network-configuration",children:"Network Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Network-specific settings\nconst stellarNetworks = {\n  testnet: {\n    horizonUrl: 'https://horizon-testnet.stellar.org',\n    networkPassphrase: 'Test SDF Network ; September 2015',\n    assetIssuer: 'test-asset-issuer-address'\n  },\n  public: {\n    horizonUrl: 'https://horizon.stellar.org',\n    networkPassphrase: 'Public Global Stellar Network ; September 2015',\n    assetIssuer: 'production-asset-issuer-address'\n  }\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"2-evm-compatible-networks",children:"2. EVM-Compatible Networks"}),"\n",(0,i.jsx)(n.h3,{id:"overview-2",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"EVM (Ethereum Virtual Machine) compatible networks provide alternative deployment options with extensive DeFi ecosystem integration and established tooling."}),"\n",(0,i.jsx)(n.h3,{id:"supported-networks",children:"Supported Networks"}),"\n",(0,i.jsx)(n.h4,{id:"1-polygon-amoy-testnet",children:"1. Polygon (Amoy Testnet)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Chain ID"}),": 80002"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Currency"}),": MATIC"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Block Time"}),": ~2 seconds"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Gas Limit"}),": 30M"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Features"}),": Low fees, fast finality"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"2-arbitrum-sepolia-testnet",children:"2. Arbitrum (Sepolia Testnet)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Chain ID"}),": 421614"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Currency"}),": ETH"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Block Time"}),": ~1 second"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Gas Limit"}),": 30M"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Features"}),": Layer 2 scaling, low fees"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"3-ethereum-mainnet",children:"3. Ethereum (Mainnet)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Chain ID"}),": 1"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Currency"}),": ETH"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Block Time"}),": ~12 seconds"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Gas Limit"}),": 30M"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Features"}),": Maximum security, established ecosystem"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"smart-contracts-solidity",children:"Smart Contracts (Solidity)"}),"\n",(0,i.jsx)(n.h4,{id:"contract-structure-1",children:"Contract Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:'// apps/contracts/src/contracts/AAProject.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport "@openzeppelin/contracts/token/ERC20/ERC20.sol";\nimport "@openzeppelin/contracts/access/AccessControl.sol";\n\ncontract AAProject is ERC20, AccessControl {\n    bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");\n    bytes32 public constant TRIGGER_ROLE = keccak256("TRIGGER_ROLE");\n\n    mapping(bytes32 => Trigger) public triggers;\n    mapping(address => bool) public beneficiaries;\n\n    struct Trigger {\n        bool isActive;\n        uint256 threshold;\n        uint256 amount;\n        string conditions;\n    }\n\n    event TriggerExecuted(bytes32 indexed triggerId, address indexed beneficiary, uint256 amount);\n    event BeneficiaryAdded(address indexed beneficiary);\n    event TriggerCreated(bytes32 indexed triggerId, uint256 threshold, uint256 amount);\n\n    constructor() ERC20("Rahat Token", "RAHAT") {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(ADMIN_ROLE, msg.sender);\n    }\n\n    function createTrigger(\n        bytes32 triggerId,\n        uint256 threshold,\n        uint256 amount,\n        string memory conditions\n    ) external onlyRole(ADMIN_ROLE) {\n        triggers[triggerId] = Trigger(true, threshold, amount, conditions);\n        emit TriggerCreated(triggerId, threshold, amount);\n    }\n\n    function executeTrigger(bytes32 triggerId, address beneficiary) external onlyRole(TRIGGER_ROLE) {\n        require(triggers[triggerId].isActive, "Trigger not active");\n        require(beneficiaries[beneficiary], "Not a beneficiary");\n\n        uint256 amount = triggers[triggerId].amount;\n        _mint(beneficiary, amount);\n\n        emit TriggerExecuted(triggerId, beneficiary, amount);\n    }\n\n    function addBeneficiary(address beneficiary) external onlyRole(ADMIN_ROLE) {\n        beneficiaries[beneficiary] = true;\n        emit BeneficiaryAdded(beneficiary);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"contract-deployment-1",children:"Contract Deployment"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// apps/contracts/scripts/deploy.js\nasync function deployAAProject() {\n  const AAProject = await ethers.getContractFactory("AAProject");\n  const aaProject = await AAProject.deploy();\n  await aaProject.deployed();\n\n  console.log("AAProject deployed to:", aaProject.address);\n  return aaProject;\n}\n\n// Deploy to specific network\nasync function deployToNetwork(networkName) {\n  const network = await ethers.providers.getNetwork();\n  \n  if (network.chainId === 80002) { // Polygon Amoy\n    console.log("Deploying to Polygon Amoy testnet");\n  } else if (network.chainId === 421614) { // Arbitrum Sepolia\n    console.log("Deploying to Arbitrum Sepolia testnet");\n  }\n  \n  return await deployAAProject();\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"evm-service-integration",children:"EVM Service Integration"}),"\n",(0,i.jsx)(n.h4,{id:"chain-service-implementation",children:"Chain Service Implementation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// apps/aa/src/chain/chain-services/evm.service.ts\n@Injectable()\nexport class EvmService implements IChainService {\n  private provider: ethers.providers.Provider;\n  private signer: ethers.Signer;\n  private contract: ethers.Contract;\n\n  constructor() {\n    this.provider = new ethers.providers.JsonRpcProvider(\n      process.env.NETWORK_PROVIDER\n    );\n    this.signer = new ethers.Wallet(\n      process.env.DEPLOYER_PRIVATE_KEY,\n      this.provider\n    );\n  }\n\n  async assignTokens(data: AssignTokensDto): Promise<any> {\n    const contract = new ethers.Contract(\n      process.env.CONTRACT_ADDRESS,\n      AAProjectABI,\n      this.signer\n    );\n\n    const tx = await contract.addBeneficiary(data.beneficiaryAddress);\n    await tx.wait();\n\n    return {\n      transactionHash: tx.hash,\n      status: 'success'\n    };\n  }\n\n  async transferTokens(data: TransferTokensDto): Promise<any> {\n    const contract = new ethers.Contract(\n      process.env.CONTRACT_ADDRESS,\n      AAProjectABI,\n      this.signer\n    );\n\n    const tx = await contract.transfer(\n      data.toAddress,\n      data.amount\n    );\n    await tx.wait();\n\n    return {\n      transactionHash: tx.hash,\n      status: 'success'\n    };\n  }\n\n  async disburse(data: DisburseDto): Promise<any> {\n    const contract = new ethers.Contract(\n      process.env.CONTRACT_ADDRESS,\n      AAProjectABI,\n      this.signer\n    );\n\n    const tx = await contract.executeTrigger(\n      data.triggerId,\n      data.beneficiaryAddress\n    );\n    await tx.wait();\n\n    return {\n      transactionHash: tx.hash,\n      status: 'success'\n    };\n  }\n\n  validateAddress(address: string): boolean {\n    return ethers.utils.isAddress(address);\n  }\n\n  getChainType(): ChainType {\n    return 'evm';\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"evm-configuration",children:"EVM Configuration"}),"\n",(0,i.jsx)(n.h4,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# EVM Configuration\nNETWORK_PROVIDER=https://polygon-amoy.infura.io/v3/YOUR_PROJECT_ID\nCHAIN_NAME=Polygon Amoy\nCHAIN_ID=80002\nCURRENCY_NAME=MATIC\nCURRENCY_SYMBOL=MATIC\nDEPLOYER_PRIVATE_KEY=your_private_key\nCONTRACT_ADDRESS=deployed_contract_address\n"})}),"\n",(0,i.jsx)(n.h4,{id:"network-configuration-1",children:"Network Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Network configurations\nconst evmNetworks = {\n  polygonAmoy: {\n    name: 'Polygon Amoy',\n    chainId: 80002,\n    rpcUrl: 'https://polygon-amoy.infura.io/v3/YOUR_PROJECT_ID',\n    currency: 'MATIC',\n    explorer: 'https://www.oklink.com/amoy'\n  },\n  arbitrumSepolia: {\n    name: 'Arbitrum Sepolia',\n    chainId: 421614,\n    rpcUrl: 'https://sepolia-rollup.arbitrum.io/rpc',\n    currency: 'ETH',\n    explorer: 'https://sepolia.arbiscan.io'\n  },\n  ethereum: {\n    name: 'Ethereum',\n    chainId: 1,\n    rpcUrl: 'https://mainnet.infura.io/v3/YOUR_PROJECT_ID',\n    currency: 'ETH',\n    explorer: 'https://etherscan.io'\n  }\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"chain-selection-strategy",children:"Chain Selection Strategy"}),"\n",(0,i.jsx)(n.h3,{id:"when-to-use-stellar-soroban",children:"When to Use Stellar Soroban"}),"\n",(0,i.jsx)(n.h4,{id:"advantages",children:"Advantages"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Low Transaction Costs"}),": ~0.00001 XLM per operation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fast Finality"}),": 3-5 second transaction confirmation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Native Asset Support"}),": Built-in asset creation and management"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Emerging Markets"}),": Better suited for developing regions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Regulatory Compliance"}),": Easier compliance in certain jurisdictions"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"use-cases",children:"Use Cases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Micro-transactions"}),": Small value transfers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"High-frequency Operations"}),": Frequent trigger executions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cost-sensitive Applications"}),": Where transaction costs matter"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Asset-backed Tokens"}),": Native asset management"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"when-to-use-evm-networks",children:"When to Use EVM Networks"}),"\n",(0,i.jsx)(n.h4,{id:"advantages-1",children:"Advantages"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"DeFi Integration"}),": Extensive DeFi ecosystem"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Established Tooling"}),": Mature development tools"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cross-chain Compatibility"}),": Interoperability with other EVM chains"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Advanced Smart Contracts"}),": Complex contract logic support"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Liquidity"}),": Access to large liquidity pools"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"use-cases-1",children:"Use Cases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Complex DeFi Operations"}),": Advanced financial products"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cross-chain Applications"}),": Multi-chain interoperability"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Established Ecosystems"}),": Integration with existing DeFi protocols"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"High-value Transactions"}),": Where security is paramount"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"cross-chain-operations",children:"Cross-Chain Operations"}),"\n",(0,i.jsx)(n.h3,{id:"chain-registry-system",children:"Chain Registry System"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// apps/aa/src/chain/chain-queue-registry/chain-queue-registry.service.ts\n@Injectable()\nexport class ChainQueueRegistryService {\n  private chainServices: Map<ChainType, IChainService> = new Map();\n\n  registerChain(chainType: ChainType, service: IChainService) {\n    this.chainServices.set(chainType, service);\n  }\n\n  getChainService(chainType: ChainType): IChainService {\n    const service = this.chainServices.get(chainType);\n    if (!service) {\n      throw new Error(`Chain service not found for type: ${chainType}`);\n    }\n    return service;\n  }\n\n  async executeOnChain(chainType: ChainType, operation: ChainOperation): Promise<any> {\n    const service = this.getChainService(chainType);\n    \n    switch (operation.type) {\n      case 'TRANSFER_TOKENS':\n        return service.transferTokens(operation.data);\n      case 'DISBURSE':\n        return service.disburse(operation.data);\n      case 'FUND_ACCOUNT':\n        return service.fundAccount(operation.data);\n      default:\n        throw new Error(`Unknown operation type: ${operation.type}`);\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"multi-chain-configuration",children:"Multi-Chain Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// apps/aa/src/chain/chain-queue-registry/chain-queue-registry.module.ts\n@Module({\n  imports: [\n    StellarModule,\n    EvmModule,\n    BullModule.registerQueue({\n      name: BQUEUE.CHAIN_OPERATIONS,\n    }),\n  ],\n  providers: [\n    ChainQueueRegistryService,\n    {\n      provide: 'CHAIN_SERVICES',\n      useFactory: (\n        stellarService: StellarService,\n        evmService: EvmService,\n        registryService: ChainQueueRegistryService\n      ) => {\n        registryService.registerChain('stellar', stellarService);\n        registryService.registerChain('evm', evmService);\n        return registryService;\n      },\n      inject: [StellarService, EvmService, ChainQueueRegistryService],\n    },\n  ],\n  exports: [ChainQueueRegistryService],\n})\nexport class ChainQueueRegistryModule {}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,i.jsx)(n.h3,{id:"private-key-management",children:"Private Key Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Secure private key handling\ninterface KeyManagement {\n  stellar: {\n    adminSecretKey: string; // Stored securely\n    assetIssuerSecretKey: string;\n  };\n  evm: {\n    deployerPrivateKey: string; // Stored securely\n    adminPrivateKey: string;\n  };\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"transaction-signing",children:"Transaction Signing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Secure transaction signing\nasync signTransaction(transaction: any, chainType: ChainType): Promise<any> {\n  switch (chainType) {\n    case 'stellar':\n      return this.signStellarTransaction(transaction);\n    case 'evm':\n      return this.signEvmTransaction(transaction);\n    default:\n      throw new Error(`Unsupported chain type: ${chainType}`);\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"monitoring-and-analytics",children:"Monitoring and Analytics"}),"\n",(0,i.jsx)(n.h3,{id:"blockchain-metrics",children:"Blockchain Metrics"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface BlockchainMetrics {\n  stellar: {\n    totalTransactions: number;\n    averageTransactionTime: number;\n    totalTokensIssued: number;\n    activeBeneficiaries: number;\n  };\n  evm: {\n    totalTransactions: number;\n    gasUsed: number;\n    averageGasPrice: number;\n    contractInteractions: number;\n  };\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"transaction-monitoring",children:"Transaction Monitoring"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"async monitorTransaction(transactionHash: string, chainType: ChainType) {\n  const service = this.getChainService(chainType);\n  \n  return {\n    hash: transactionHash,\n    status: await service.getTransactionStatus(transactionHash),\n    confirmations: await service.getConfirmations(transactionHash),\n    timestamp: await service.getTransactionTimestamp(transactionHash)\n  };\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,i.jsx)(n.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"describe('Chain Services', () => {\n  it('should transfer tokens on Stellar', async () => {\n    const result = await stellarService.transferTokens({\n      fromAddress: 'GABC123456789',\n      toAddress: 'GDEF987654321',\n      amount: 1000,\n      assetCode: 'RAHAT'\n    });\n    \n    expect(result.status).toBe('success');\n    expect(result.transactionHash).toBeDefined();\n  });\n\n  it('should execute trigger on EVM', async () => {\n    const result = await evmService.disburse({\n      triggerId: 'flood-warning-001',\n      beneficiaryAddress: '0x1234567890abcdef'\n    });\n    \n    expect(result.status).toBe('success');\n    expect(result.transactionHash).toBeDefined();\n  });\n});\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);