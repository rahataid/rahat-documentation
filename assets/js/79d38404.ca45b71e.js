"use strict";(self.webpackChunkrahat_documentation=self.webpackChunkrahat_documentation||[]).push([[7696],{28453:(n,e,i)=>{i.d(e,{R:()=>o,x:()=>r});var t=i(96540);const a={},s=t.createContext(a);function o(n){const e=t.useContext(s);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:o(n.components),t.createElement(s.Provider,{value:e},n.children)}},56012:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Project-Modules/Anticipatory-Action/Comunication-Services","title":"Communication Services","description":"This document provides detailed information about the communication services integrated into the Rahat Anticipatory Action platform, including the @rumsan/connect system, message delivery, and communication workflows.","source":"@site/dev-docs/Project-Modules/01.Anticipatory-Action/05.Comunication-Services.md","sourceDirName":"Project-Modules/01.Anticipatory-Action","slug":"/Project-Modules/Anticipatory-Action/Comunication-Services","permalink":"/dev-docs/Project-Modules/Anticipatory-Action/Comunication-Services","draft":false,"unlisted":false,"editUrl":"https://github.com/rahataid/rahat-documentation/blob/dev/dev-docs/Project-Modules/01.Anticipatory-Action/05.Comunication-Services.md","tags":[],"version":"current","lastUpdatedAt":1754880255000,"sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"Communication Services"},"sidebar":"myAutogeneratedSidebar","previous":{"title":"Financial Payout Services","permalink":"/dev-docs/Project-Modules/Anticipatory-Action/Payout-Services"},"next":{"title":"Supported Blockchains","permalink":"/dev-docs/Project-Modules/Anticipatory-Action/Supported-Blockchains"}}');var a=i(74848),s=i(28453);const o={sidebar_position:5,title:"Communication Services"},r="Communication Services",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Core Components",id:"core-components",level:3},{value:"1. @rumsan/connect Platform",id:"1-rumsanconnect-platform",level:4},{value:"2. Communication Module",id:"2-communication-module",level:4},{value:"3. Activities Integration",id:"3-activities-integration",level:4},{value:"Communication Flow",id:"communication-flow",level:2},{value:"1. Communication Initialization",id:"1-communication-initialization",level:3},{value:"CommsService Setup",id:"commsservice-setup",level:4},{value:"Global Registration",id:"global-registration",level:4},{value:"2. Communication Configuration",id:"2-communication-configuration",level:3},{value:"Transport Types",id:"transport-types",level:4},{value:"Validation Address Types",id:"validation-address-types",level:4},{value:"3. Activity Communication Integration",id:"3-activity-communication-integration",level:3},{value:"Communication Data Structure",id:"communication-data-structure",level:4},{value:"Communication Triggering",id:"communication-triggering",level:4},{value:"4. Address Management",id:"4-address-management",level:3},{value:"Beneficiary Address Retrieval",id:"beneficiary-address-retrieval",level:4},{value:"5. Message Delivery",id:"5-message-delivery",level:3},{value:"Broadcast Creation",id:"broadcast-creation",level:4},{value:"Delivery Status Tracking",id:"delivery-status-tracking",level:4},{value:"Communication Channels",id:"communication-channels",level:2},{value:"1. SMS Communication",id:"1-sms-communication",level:3},{value:"Configuration",id:"configuration",level:4},{value:"Message Format",id:"message-format",level:4},{value:"2. Email Communication",id:"2-email-communication",level:3},{value:"Configuration",id:"configuration-1",level:4},{value:"Message Format",id:"message-format-1",level:4},{value:"3. Voice Communication",id:"3-voice-communication",level:3},{value:"Configuration",id:"configuration-2",level:4},{value:"Message Format",id:"message-format-2",level:4},{value:"Queue Management",id:"queue-management",level:2},{value:"Communication Queue",id:"communication-queue",level:3},{value:"Queue Configuration",id:"queue-configuration",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Retry Logic",id:"retry-logic",level:3},{value:"Error Types",id:"error-types",level:3},{value:"Monitoring and Analytics",id:"monitoring-and-analytics",level:2},{value:"Communication Metrics",id:"communication-metrics",level:3},{value:"Session Tracking",id:"session-tracking",level:3},{value:"Security and Privacy",id:"security-and-privacy",level:2},{value:"Data Protection",id:"data-protection",level:3},{value:"Access Control",id:"access-control",level:3},{value:"Configuration Management",id:"configuration-management",level:2},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Settings Management",id:"settings-management",level:3}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"communication-services",children:"Communication Services"})}),"\n",(0,a.jsx)(e.p,{children:"This document provides detailed information about the communication services integrated into the Rahat Anticipatory Action platform, including the @rumsan/connect system, message delivery, and communication workflows."}),"\n",(0,a.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(e.p,{children:"The communication system enables multi-channel messaging to beneficiaries and stakeholders, supporting SMS, email, and voice calls. The system is built around the @rumsan/connect platform and integrates seamlessly with the activity management workflow."}),"\n",(0,a.jsx)(e.h2,{id:"architecture",children:"Architecture"}),"\n",(0,a.jsx)(e.h3,{id:"core-components",children:"Core Components"}),"\n",(0,a.jsx)(e.h4,{id:"1-rumsanconnect-platform",children:"1. @rumsan/connect Platform"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Purpose"}),": Centralized communication management"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Integration"}),": Microservice communication via Redis"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Features"}),": Multi-channel delivery, session tracking, delivery status"]}),"\n"]}),"\n",(0,a.jsx)(e.h4,{id:"2-communication-module",children:"2. Communication Module"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Location"}),": ",(0,a.jsx)(e.code,{children:"apps/aa/src/comms/"})]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Components"}),": ",(0,a.jsx)(e.code,{children:"CommsModule"}),", ",(0,a.jsx)(e.code,{children:"CommsService"})]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Purpose"}),": Initialize and manage communication client"]}),"\n"]}),"\n",(0,a.jsx)(e.h4,{id:"3-activities-integration",children:"3. Activities Integration"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Location"}),": ",(0,a.jsx)(e.code,{children:"apps/aa/src/activities/"})]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Purpose"}),": Central hub for communication management"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Features"}),": Communication triggering, session tracking, address management"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"communication-flow",children:"Communication Flow"}),"\n",(0,a.jsx)(e.h3,{id:"1-communication-initialization",children:"1. Communication Initialization"}),"\n",(0,a.jsx)(e.h4,{id:"commsservice-setup",children:"CommsService Setup"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"// apps/aa/src/comms/comms.service.ts\n@Injectable()\nexport class CommsService {\n  private commsClient: any;\n\n  async init() {\n    // Fetch communication settings from core service\n    const settings = await this.coreClient.send({\n      cmd: 'SETTINGS.GET',\n      data: { name: 'COMMUNICATION_SETTINGS' }\n    });\n\n    // Initialize @rumsan/connect client\n    this.commsClient = new ConnectClient({\n      url: settings.value.URL,\n      appId: settings.value.APP_ID,\n      accessToken: settings.value.ACCESS_TOKEN\n    });\n  }\n\n  getClient() {\n    return this.commsClient;\n  }\n}\n"})}),"\n",(0,a.jsx)(e.h4,{id:"global-registration",children:"Global Registration"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"// apps/aa/src/app/app.module.ts\n@Module({\n  imports: [\n    CommsModule,\n    // ... other modules\n  ],\n  providers: [\n    {\n      provide: 'COMMS_CLIENT',\n      useFactory: async (commsService: CommsService) => {\n        await commsService.init();\n        return commsService.getClient();\n      },\n      inject: [CommsService],\n    }\n  ]\n})\nexport class AppModule {}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"2-communication-configuration",children:"2. Communication Configuration"}),"\n",(0,a.jsx)(e.h4,{id:"transport-types",children:"Transport Types"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"enum TransportType {\n  SMS = 'SMS',\n  EMAIL = 'EMAIL',\n  VOICE = 'VOICE'\n}\n\ninterface TransportConfig {\n  id: string;\n  type: TransportType;\n  validationAddress: ValidationAddress;\n  data?: {\n    provider?: string;\n    template?: string;\n    sender?: string;\n  };\n}\n"})}),"\n",(0,a.jsx)(e.h4,{id:"validation-address-types",children:"Validation Address Types"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"enum ValidationAddress {\n  PHONE = 'PHONE',\n  EMAIL = 'EMAIL'\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"3-activity-communication-integration",children:"3. Activity Communication Integration"}),"\n",(0,a.jsx)(e.h4,{id:"communication-data-structure",children:"Communication Data Structure"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"interface ActivityCommunication {\n  groupId: string;\n  message: string | {\n    mediaURL: string;\n    fileName: string;\n  };\n  groupType: 'STAKEHOLDERS' | 'BENEFICIARY';\n  transportId: string;\n  communicationId: string;\n  sessionId?: string;\n}\n"})}),"\n",(0,a.jsx)(e.h4,{id:"communication-triggering",children:"Communication Triggering"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"// apps/aa/src/activities/activities.service.ts\nasync triggerCommunication(payload: {\n  communicationId: string;\n  activityId: string;\n}) {\n  const activity = await this.prisma.activities.findUnique({\n    where: { uuid: payload.activityId }\n  });\n\n  const parsedCommunications = JSON.parse(\n    JSON.stringify(activity.activityCommunication)\n  ) as ActivityCommunication[];\n\n  const selectedCommunication = parsedCommunications.find(\n    (c) => c?.communicationId === payload.communicationId\n  );\n\n  // Get transport details\n  const transportDetails = await this.commsClient.transport.get(\n    selectedCommunication.transportId\n  );\n\n  // Get recipient addresses\n  const addresses = await this.getAddresses(\n    selectedCommunication.groupType,\n    selectedCommunication.groupId,\n    transportDetails.data.validationAddress\n  );\n\n  // Prepare message content\n  let messageContent: string;\n  if (transportDetails.data.type === TransportType.VOICE) {\n    const msg = selectedCommunication.message as {\n      mediaURL: string;\n      fileName: string;\n    };\n    messageContent = msg.mediaURL;\n  } else {\n    messageContent = selectedCommunication.message as string;\n  }\n\n  // Create broadcast session\n  const sessionData = await this.commsClient.broadcast.create({\n    uuid: payload.communicationId,\n    addresses,\n    msgContent: messageContent,\n    transportId: selectedCommunication.transportId,\n  });\n\n  // Update activity with session ID\n  await this.updateActivityCommunicationSession(\n    payload.activityId,\n    payload.communicationId,\n    sessionData.sessionId\n  );\n\n  return sessionData;\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"4-address-management",children:"4. Address Management"}),"\n",(0,a.jsx)(e.h4,{id:"beneficiary-address-retrieval",children:"Beneficiary Address Retrieval"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"async getAddresses(\n  groupType: 'STAKEHOLDERS' | 'BENEFICIARY',\n  groupId: string,\n  validationAddress: ValidationAddress\n): Promise<string[]> {\n  if (groupType === 'BENEFICIARY') {\n    const beneficiaries = await this.getBeneficiariesByGroup(groupId);\n    return this.pickPhoneOrEmail(beneficiaries, validationAddress);\n  } else {\n    const stakeholders = await this.getStakeholdersByGroup(groupId);\n    return this.pickPhoneOrEmail(stakeholders, validationAddress);\n  }\n}\n\npickPhoneOrEmail(recipients: any[], type: string): string[] {\n  if (type === ValidationAddress.EMAIL) {\n    return recipients.map((r) => r.email).filter(Boolean);\n  } else {\n    return recipients.map((r) => r.phone).filter(Boolean);\n  }\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"5-message-delivery",children:"5. Message Delivery"}),"\n",(0,a.jsx)(e.h4,{id:"broadcast-creation",children:"Broadcast Creation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"// Create broadcast session\nconst sessionData = await this.commsClient.broadcast.create({\n  uuid: communicationId,\n  addresses: recipientAddresses,\n  msgContent: messageContent,\n  transportId: transportId,\n  options: {\n    priority: 'high',\n    retryAttempts: 3,\n    deliveryTimeout: 300000 // 5 minutes\n  }\n});\n"})}),"\n",(0,a.jsx)(e.h4,{id:"delivery-status-tracking",children:"Delivery Status Tracking"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"async getSessionLogs(sessionId: string) {\n  return this.commsClient.broadcast.getSessionLogs(sessionId);\n}\n\nasync getDeliveryStatus(broadcastId: string) {\n  return this.commsClient.broadcast.getStatus(broadcastId);\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"communication-channels",children:"Communication Channels"}),"\n",(0,a.jsx)(e.h3,{id:"1-sms-communication",children:"1. SMS Communication"}),"\n",(0,a.jsx)(e.h4,{id:"configuration",children:"Configuration"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"const smsTransport = {\n  id: 'sms-provider-001',\n  type: TransportType.SMS,\n  validationAddress: ValidationAddress.PHONE,\n  data: {\n    provider: 'twilio',\n    sender: 'RAHAT',\n    template: 'Your assistance of {amount} has been activated. Stay safe!'\n  }\n};\n"})}),"\n",(0,a.jsx)(e.h4,{id:"message-format",children:"Message Format"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:'const smsMessage = {\n  content: "Your assistance of 5000 NPR has been activated due to flood warning. Stay safe!",\n  recipients: ["+9779841234567", "+9779841234568"],\n  transportId: "sms-provider-001"\n};\n'})}),"\n",(0,a.jsx)(e.h3,{id:"2-email-communication",children:"2. Email Communication"}),"\n",(0,a.jsx)(e.h4,{id:"configuration-1",children:"Configuration"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"const emailTransport = {\n  id: 'email-provider-001',\n  type: TransportType.EMAIL,\n  validationAddress: ValidationAddress.EMAIL,\n  data: {\n    provider: 'sendgrid',\n    sender: 'noreply@rahat.org',\n    template: 'assistance-activation.html'\n  }\n};\n"})}),"\n",(0,a.jsx)(e.h4,{id:"message-format-1",children:"Message Format"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:'const emailMessage = {\n  subject: "Emergency Assistance Activated",\n  content: "<html><body><h1>Emergency Assistance</h1><p>Your assistance has been activated...</p></body></html>",\n  recipients: ["beneficiary@example.com"],\n  transportId: "email-provider-001"\n};\n'})}),"\n",(0,a.jsx)(e.h3,{id:"3-voice-communication",children:"3. Voice Communication"}),"\n",(0,a.jsx)(e.h4,{id:"configuration-2",children:"Configuration"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"const voiceTransport = {\n  id: 'voice-provider-001',\n  type: TransportType.VOICE,\n  validationAddress: ValidationAddress.PHONE,\n  data: {\n    provider: 'twilio',\n    language: 'ne',\n    voice: 'female'\n  }\n};\n"})}),"\n",(0,a.jsx)(e.h4,{id:"message-format-2",children:"Message Format"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:'const voiceMessage = {\n  mediaURL: "https://storage.rahat.org/audio/emergency-alert.mp3",\n  fileName: "emergency-alert.mp3",\n  recipients: ["+9779841234567"],\n  transportId: "voice-provider-001"\n};\n'})}),"\n",(0,a.jsx)(e.h2,{id:"queue-management",children:"Queue Management"}),"\n",(0,a.jsx)(e.h3,{id:"communication-queue",children:"Communication Queue"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"// apps/aa/src/processors/communication.processor.ts\n@Processor(BQUEUE.COMMUNICATION)\nexport class CommunicationProcessor {\n  constructor(private readonly activitiesService: ActivitiesService) {}\n\n  @Process(JOBS.ACTIVITIES.COMMUNICATION.TRIGGER)\n  async processCommunicationTrigger(job: Job) {\n    const payload = job.data;\n    await this.activitiesService.triggerCommunication({\n      communicationId: payload.communicationId,\n      activityId: payload.activityId\n    });\n    return;\n  }\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"queue-configuration",children:"Queue Configuration"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"const communicationQueueConfig = {\n  name: BQUEUE.COMMUNICATION,\n  defaultJobOptions: {\n    attempts: 3,\n    backoff: {\n      type: 'exponential',\n      delay: 2000\n    },\n    removeOnComplete: 100,\n    removeOnFail: 50\n  }\n};\n"})}),"\n",(0,a.jsx)(e.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,a.jsx)(e.h3,{id:"retry-logic",children:"Retry Logic"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"async triggerCommunicationWithRetry(payload: CommunicationPayload) {\n  try {\n    return await this.triggerCommunication(payload);\n  } catch (error) {\n    this.logger.error(`Communication failed: ${error.message}`);\n    \n    // Retry with exponential backoff\n    if (this.shouldRetry(error)) {\n      await this.queue.add(\n        JOBS.ACTIVITIES.COMMUNICATION.TRIGGER,\n        payload,\n        {\n          delay: this.calculateRetryDelay(),\n          attempts: 3\n        }\n      );\n    }\n    \n    throw error;\n  }\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"error-types",children:"Error Types"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"enum CommunicationError {\n  INVALID_ADDRESS = 'INVALID_ADDRESS',\n  TRANSPORT_UNAVAILABLE = 'TRANSPORT_UNAVAILABLE',\n  RATE_LIMIT_EXCEEDED = 'RATE_LIMIT_EXCEEDED',\n  PROVIDER_ERROR = 'PROVIDER_ERROR'\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"monitoring-and-analytics",children:"Monitoring and Analytics"}),"\n",(0,a.jsx)(e.h3,{id:"communication-metrics",children:"Communication Metrics"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"interface CommunicationMetrics {\n  totalSent: number;\n  delivered: number;\n  failed: number;\n  pending: number;\n  deliveryRate: number;\n  averageDeliveryTime: number;\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"session-tracking",children:"Session Tracking"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"async getCommunicationSessionDetails(sessionId: string) {\n  return {\n    sessionId,\n    status: await this.commsClient.broadcast.getStatus(sessionId),\n    logs: await this.commsClient.broadcast.getSessionLogs(sessionId),\n    recipients: await this.commsClient.broadcast.getRecipients(sessionId),\n    deliveryStats: await this.commsClient.broadcast.getDeliveryStats(sessionId)\n  };\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"security-and-privacy",children:"Security and Privacy"}),"\n",(0,a.jsx)(e.h3,{id:"data-protection",children:"Data Protection"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Encryption"}),": All communication data encrypted in transit"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"PII Handling"}),": Phone numbers and emails stored securely"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Consent Management"}),": Recipient consent tracking"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Audit Logging"}),": All communication activities logged"]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"access-control",children:"Access Control"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"interface CommunicationPermissions {\n  canSendSMS: boolean;\n  canSendEmail: boolean;\n  canSendVoice: boolean;\n  canViewLogs: boolean;\n  canManageTransports: boolean;\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"configuration-management",children:"Configuration Management"}),"\n",(0,a.jsx)(e.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"# Communication Service Configuration\nCOMMUNICATION_URL=https://connect.rumsan.com\nCOMMUNICATION_APP_ID=rahat-aa\nCOMMUNICATION_ACCESS_TOKEN=your_access_token\n\n# Transport Provider Configuration\nSMS_PROVIDER_API_KEY=your_sms_api_key\nEMAIL_PROVIDER_API_KEY=your_email_api_key\nVOICE_PROVIDER_API_KEY=your_voice_api_key\n"})}),"\n",(0,a.jsx)(e.h3,{id:"settings-management",children:"Settings Management"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"// Communication settings stored in database\ninterface CommunicationSettings {\n  URL: string;\n  APP_ID: string;\n  ACCESS_TOKEN: string;\n  DEFAULT_TRANSPORT: string;\n  RATE_LIMITS: {\n    SMS_PER_HOUR: number;\n    EMAIL_PER_HOUR: number;\n    VOICE_PER_HOUR: number;\n  };\n}\n"})})]})}function m(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}}}]);